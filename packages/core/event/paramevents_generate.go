//go:build ignore

package main

import (
	"fmt"
	"os"
	"strconv"
	"strings"
)

func main() {
	targetFile, err := os.Create("paramevents.go")
	if err != nil {
		panic(err)
	}

	readFile, err := os.ReadFile(os.Getenv("GOFILE"))
	if err != nil {
		panic(err)
	}

	fileContent := string(readFile)

	splitTemplate := strings.Split(fileContent, "//go:generate")
	if len(splitTemplate) != 2 {
		panic("could not find go:generate directive")
	}

	header := splitTemplate[0]
	footer := splitTemplate[1]

	footer = footer[strings.Index(footer, "\n"):]

	fmt.Println(header)
	fmt.Println(footer)

	fileContent = "// Code generated by go generate; DO NOT EDIT.\n\n" + fileContent
	fileContent = strings.ReplaceAll(fileContent, "//go:generate go run gen.go\n\n", "")
	fileContent = strings.ReplaceAll(fileContent, "ParamEvent1", "ParamEvent2")                                           // constraintCount
	fileContent = strings.ReplaceAll(fileContent, "New1", "New2")                                                         // constraintCount
	fileContent = strings.ReplaceAll(fileContent, "[Param1]", "[Param1, Param2]")                                         // untypedConstraints
	fileContent = strings.ReplaceAll(fileContent, "[Param1 any]", "[Param1, Param2 any]")                                 // typedConstraints
	fileContent = strings.ReplaceAll(fileContent, "(param1)", "(param1, param2)")                                         // untypedParams
	fileContent = strings.ReplaceAll(fileContent, "(Param1)", "(Param1, Param2)")                                         // paramTypes
	fileContent = strings.ReplaceAll(fileContent, "(param1 Param1)", "(param1 Param1"+extend(", param%d Param%d", 4)+")") // typedParams

	// _, err = targetFile.WriteString(fileContent)
	// if err != nil {
	// 	panic(err)
	// }
}

func extend(template string, end int) string {
	result := ""
	for i := 2; i <= end; i++ {
		result += strings.ReplaceAll(template, "%d", strconv.Itoa(i))
	}

	return result
}
