package conflictdag

import (
	"github.com/iotaledger/hive.go/core/generics/event"
	"github.com/iotaledger/hive.go/core/generics/set"
)

// region Events ///////////////////////////////////////////////////////////////////////////////////////////////////////

// Events is a container that acts as a dictionary for the events of a ConflictDAG.
type Events[ConflictIDType, ResourceIDType comparable] struct {
	// ConflictCreated is an event that gets triggered whenever a new Conflict is created.
	ConflictCreated *event.Linkable[*Conflict[ConflictIDType, ResourceIDType]]

	// ConflictUpdated is an event that gets triggered whenever the ConflictIDTypes of a Conflict are updated.
	ConflictUpdated *event.Linkable[*Conflict[ConflictIDType, ResourceIDType]]

	// ConflictParentsUpdated is an event that gets triggered whenever the parent ConflictIDTypeTypes of a Conflict are updated.
	ConflictParentsUpdated *event.Linkable[*ConflictParentsUpdatedEvent[ConflictIDType, ResourceIDType]]

	// ConflictAccepted is an event that gets triggered whenever a Conflict is confirmed.
	ConflictAccepted *event.Linkable[*Conflict[ConflictIDType, ResourceIDType]]

	// ConflictRejected is an event that gets triggered whenever a Conflict is rejected.
	ConflictRejected *event.Linkable[*Conflict[ConflictIDType, ResourceIDType]]

	event.LinkableCollection[Events[ConflictIDType, ResourceIDType], *Events[ConflictIDType, ResourceIDType]]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
func NewEvents[ConflictIDType, ResourceIDType comparable](optsLinkTarget ...*Events[ConflictIDType, ResourceIDType]) (events *Events[ConflictIDType, ResourceIDType]) {
	return event.LinkableConstructor(func() (self *Events[ConflictIDType, ResourceIDType]) {
		return &Events[ConflictIDType, ResourceIDType]{
			ConflictCreated:        event.NewLinkable[*Conflict[ConflictIDType, ResourceIDType]](),
			ConflictUpdated:        event.NewLinkable[*Conflict[ConflictIDType, ResourceIDType]](),
			ConflictParentsUpdated: event.NewLinkable[*ConflictParentsUpdatedEvent[ConflictIDType, ResourceIDType]](),
			ConflictAccepted:       event.NewLinkable[*Conflict[ConflictIDType, ResourceIDType]](),
			ConflictRejected:       event.NewLinkable[*Conflict[ConflictIDType, ResourceIDType]](),
		}
	})(optsLinkTarget...)
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////

// region ConflictParentsUpdatedEvent ////////////////////////////////////////////////////////////////////////////////////

// ConflictParentsUpdatedEvent is a container that acts as a dictionary for the ConflictParentsUpdated event related
// parameters.
type ConflictParentsUpdatedEvent[ConflictIDType, ResourceIDType comparable] struct {
	// ConflictIDType contains the identifier of the updated Conflict.
	ConflictID ConflictIDType

	// AddedConflict contains the forked parent Conflict that replaces the removed parents.
	AddedConflict ConflictIDType

	// RemovedConflicts contains the parent ConflictIDTypes that were replaced by the newly forked Conflict.
	RemovedConflicts *set.AdvancedSet[ConflictIDType]

	// ParentsConflictIDs contains the updated list of parent ConflictIDTypes.
	ParentsConflictIDs *set.AdvancedSet[ConflictIDType]
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////
