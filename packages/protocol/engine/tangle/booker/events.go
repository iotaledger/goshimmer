package booker

import (
	"github.com/iotaledger/goshimmer/packages/core/votes/sequencetracker"
	"github.com/iotaledger/goshimmer/packages/core/votes/slottracker"
	"github.com/iotaledger/goshimmer/packages/protocol/engine/ledger/utxo"
	"github.com/iotaledger/goshimmer/packages/protocol/markers"
	"github.com/iotaledger/hive.go/runtime/event"
)

type Events struct {
	BlockBooked         *event.Event1[*BlockBookedEvent]
	AttachmentCreated   *event.Event1[*Block]
	AttachmentOrphaned  *event.Event1[*Block]
	BlockConflictAdded  *event.Event1[*BlockConflictAddedEvent]
	MarkerConflictAdded *event.Event1[*MarkerConflictAddedEvent]
	Error               *event.Event1[error]

	SequenceEvicted *event.Event1[markers.SequenceID]

	BlockTracked    *event.Event1[*Block]
	SequenceTracker *sequencetracker.Events
	SlotTracker     *slottracker.Events

	event.Group[Events, *Events]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
var NewEvents = event.CreateGroupConstructor(func() (newEvents *Events) {
	return &Events{
		BlockBooked:         event.New1[*BlockBookedEvent](),
		AttachmentCreated:   event.New1[*Block](),
		AttachmentOrphaned:  event.New1[*Block](),
		BlockConflictAdded:  event.New1[*BlockConflictAddedEvent](),
		MarkerConflictAdded: event.New1[*MarkerConflictAddedEvent](),
		Error:               event.New1[error](),

		BlockTracked:    event.New1[*Block](),
		SequenceEvicted: event.New1[markers.SequenceID](),
		SequenceTracker: sequencetracker.NewEvents(),
		SlotTracker:     slottracker.NewEvents(),
	}
})

type BlockConflictAddedEvent struct {
	Block             *Block
	ConflictID        utxo.TransactionID
	ParentConflictIDs utxo.TransactionIDs
}

type MarkerConflictAddedEvent struct {
	Marker            markers.Marker
	ConflictID        utxo.TransactionID
	ParentConflictIDs utxo.TransactionIDs
}

type BlockBookedEvent struct {
	Block       *Block
	ConflictIDs utxo.TransactionIDs
}
