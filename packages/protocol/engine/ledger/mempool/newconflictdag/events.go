package newconflictdag

import (
	"github.com/iotaledger/hive.go/ds/advancedset"
	"github.com/iotaledger/hive.go/runtime/event"
)

// region Events ///////////////////////////////////////////////////////////////////////////////////////////////////////

// Events is a container that acts as a dictionary for the events of a ConflictDAG.
type Events[ConflictID, ResourceID comparable] struct {
	// ConflictCreated is triggered when a new Conflict is created.
	ConflictCreated *event.Event1[ConflictID]

	// ConflictEvicted is triggered when a Conflict is evicted from the ConflictDAG.
	ConflictEvicted *event.Event1[ConflictID]

	// ConflictingResourcesAdded is triggered when the Conflict is added to a new ConflictSet.
	ConflictingResourcesAdded *event.Event2[ConflictID, *advancedset.AdvancedSet[ResourceID]]

	// ConflictParentsUpdated is triggered when the parents of a Conflict are updated.
	ConflictParentsUpdated *event.Event2[ConflictID, *advancedset.AdvancedSet[ConflictID]]

	// ConflictAccepted is an event that gets triggered whenever a Conflict is confirmed.
	ConflictAccepted *event.Event1[ConflictID]

	// ConflictRejected is an event that gets triggered whenever a Conflict is rejected.
	ConflictRejected *event.Event1[ConflictID]

	// TODO: add ConflictUpdated(?)

	event.Group[Events[ConflictID, ResourceID], *Events[ConflictID, ResourceID]]
}

// NewEvents contains the constructor of the Events object (it is generated by a generic factory).
func NewEvents[ConflictID, ResourceID comparable](optsLinkTarget ...*Events[ConflictID, ResourceID]) (events *Events[ConflictID, ResourceID]) {
	return event.CreateGroupConstructor(func() (self *Events[ConflictID, ResourceID]) {
		return &Events[ConflictID, ResourceID]{
			ConflictCreated:           event.New1[ConflictID](),
			ConflictEvicted:           event.New1[ConflictID](),
			ConflictingResourcesAdded: event.New2[ConflictID, *advancedset.AdvancedSet[ResourceID]](),
			ConflictParentsUpdated:    event.New2[ConflictID, *advancedset.AdvancedSet[ConflictID]](),
			ConflictAccepted:          event.New1[ConflictID](),
			ConflictRejected:          event.New1[ConflictID](),
		}
	})(optsLinkTarget...)
}

// endregion ///////////////////////////////////////////////////////////////////////////////////////////////////////////
