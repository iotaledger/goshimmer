version: "3.9"
# Create a custom build that can be re-used within Docker network
x-build-goshimmer: &goshimmer_build
  context: ../../
  args:
    DOWNLOAD_SNAPSHOT: 0
services:
  peer_master:
    build: *goshimmer_build
    stop_grace_period: 1m
    command: >
      --analysis.dashboard.bindAddress=0.0.0.0:9000
      --analysis.dashboard.dev=false
      --analysis.server.bindAddress=0.0.0.0:1888
      --autoPeering.entryNodes=
      --node.seed=base58:8q491c3YWjbPwLmF2WD95YmCgh61j2kenCKHfGfByoWi
      --node.overwriteStoredSeed=true
      --config=/run/secrets/goshimmer.config.json
      --database.directory=/tmp/mainnetdb
      --node.peerDBDirectory=/tmp/peerdb
      --mana.enableResearchVectors=false
      --mana.snapshotResetTime=true
      --messageLayer.snapshot.file=/run/secrets/goshimmer.message.snapshot.bin
      --messageLayer.snapshot.genesisNode=
      --messageLayer.startSynced=true
      --metrics.global=true
      --metrics.local=true
      --metrics.manaResearch=false
      --node.disablePlugins=portcheck,clock,Firewall
      --node.enablePlugins=analysisServer,analysisDashboard,prometheus,spammer,WebAPIToolsMessageEndpoint,activity,snapshot
      --prometheus.bindAddress=0.0.0.0:9311
      --prometheus.processMetrics=false
      --webAPI.exportPath=/tmp/
      --messageLayer.startSynced=true
    secrets:
      - goshimmer.config.json
      - goshimmer.message.snapshot.bin
    volumes:
      - shimmerdb:/tmp/mainnetdb
      - peerdb:/tmp/peerdb
    ports:
      - "8080:8080/tcp" # web API
      - "8081:8081/tcp" # dashboard
      - "8061:8061/tcp" # dags visualizer
      - "9000:9000/tcp" # analysis dashboard
      - "6081:6061/tcp" # pprof
    expose:
      - 1888/tcp # analysis server
    networks:
      - shimmer
  peer_replica:
    build: *goshimmer_build
    stop_grace_period: 1m
    command: >
      --config=/run/secrets/goshimmer.config.json
      --database.directory=/tmp/mainnetdb
      --node.peerDBDirectory=/tmp/peerdb
      --node.enablePlugins=bootstrap,"webAPIToolsEndpoint"
      --messageLayer.snapshot.file=/run/secrets/goshimmer.message.snapshot.bin
      --messageLayer.snapshot.genesisNode=
      --messageLayer.startSynced=true
      --node.disablePlugins=portcheck,clock,Firewall
      --mana.snapshotResetTime=true
      --webAPI.exportPath=/tmp/
    deploy:
      replicas: ${SHIMMER_PEER_REPLICAS:-1}
    secrets:
      - goshimmer.config.json
      - goshimmer.message.snapshot.bin
    networks:
      - shimmer
    depends_on:
      - peer_master
  peer_master2:
    build: *goshimmer_build
    stop_grace_period: 1m
    command: >
      --config=/run/secrets/goshimmer.config.json
      --database.directory=/tmp/mainnetdb
      --node.enablePlugins="webapi tools endpoint",activity,spammer,prometheus
      --messageLayer.snapshot.file=/run/secrets/goshimmer.message.snapshot.bin
      --messageLayer.snapshot.genesisNode=
      --messageLayer.startSynced=true
      --node.disablePlugins=portcheck,clock,Firewall
      --prometheus.bindAddress=0.0.0.0:9311
      --prometheus.processMetrics=false
      --mana.snapshotResetTime=true
      --messageLayer.startSynced=true
    secrets:
      - goshimmer.config.json
      - goshimmer.message.snapshot.bin
    ports:
      - "8070:8080/tcp" # web API
      - "8071:8081/tcp" # dashboard
      - "6071:6061/tcp" # pprof
    networks:
      - shimmer
    depends_on:
      - peer_master
  faucet:
    build: *goshimmer_build
    stop_grace_period: 1m
    command: >
      --config=/run/secrets/goshimmer.config.json
      --database.directory=/tmp/mainnetdb
      --node.peerDBDirectory=/tmp/peerdb
      --node.enablePlugins=bootstrap,"webapi tools endpoint",faucet,activity,spammer
      --node.seed=base58:3YX6e7AL28hHihZewKdq6CMkEYVsTJBLgRiprUNiNq5E
      --node.overwriteStoredSeed=true
      --node.enablePlugins=bootstrap,"webAPIToolsEndpoint",faucet,activity,prometheus
      --prometheus.bindAddress=0.0.0.0:9311
      --prometheus.processMetrics=false
      --messageLayer.snapshot.file=/run/secrets/goshimmer.message.snapshot.bin
      --messageLayer.startSynced=true
      --faucet.seed=7R1itJx5hVuo9w9hjg5cwKFmek4HMSoBDgJZN8hKGxih
      --messageLayer.snapshot.genesisNode=
      --node.disablePlugins=portcheck,clock,Firewall
      --mana.snapshotResetTime=true
      --webAPI.exportPath=/tmp/
    secrets:
      - goshimmer.config.json
      - goshimmer.message.snapshot.bin
    ports:
      - "8090:8080/tcp" # web API
      - "8051:8061/tcp" # dags visualizer
      - "8091:8081/tcp" # dashboard
      - "6091:6061/tcp" # pprof
    networks:
      - shimmer
    depends_on:
      - peer_master
  prometheus:
    image: prom/prometheus:latest
    profiles:
      - grafana
    ports:
      - "9090:9090"
    command:
      - --config.file=/run/secrets/prometheus.yml
    secrets:
      - prometheus.yml
    networks:
      - shimmer
    depends_on:
      - peer_master
  grafana:
    image: grafana/grafana:latest
    profiles:
      - grafana
    environment:
      # path to provisioning definitions can only be defined as
      # environment variables for grafana within docker
      - GF_PATHS_PROVISIONING=/var/lib/grafana/provisioning
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=false
    networks:
      - shimmer
    ports:
      - "3000:3000"
    user: "104"
    volumes:
      - grafana-data-volume:/var/lib/grafana
      - ./grafana/provisioning:/var/lib/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
  drand-leader:
    image: angelocapossele/drand:v1.1.4
    entrypoint: /data/client-script.sh
    profiles:
      - drng
    ports:
      - "8000:8000/tcp"
      - "8800:8081/tcp"
    networks:
      - shimmer
    environment:
      LEADER: 1
      GOSHIMMER: http://peer_master:8080
    depends_on:
      - peer_master
  drand-client:
    image: angelocapossele/drand:v1.1.4
    entrypoint: /data/client-script.sh
    profiles:
      - drng
    ports:
      - "8000/tcp"
      - "8081/tcp"
    deploy:
      replicas: ${DRNG_REPLICAS:-4}
    external_links:
      # Manually set the container name for the leader to what the container expects
      - drand-leader:testdrng-drand_0
    networks:
      - shimmer
    environment:
      GOSHIMMER: http://peer_master:8080
    depends_on:
      - drand-leader
# Create our own network
networks:
  shimmer:
    driver: bridge
# Named Docker volumes for data persistence
# ./run.sh removes these on exit
volumes:
  shimmerdb:
  peerdb:
  grafana-data-volume:
# read only files to load in the containers that may be shared across containers
secrets:
  goshimmer.message.snapshot.bin:
    file: ${SNAPSHOT_FILE:-../integration-tests/assets/7R1itJx5hVuo9w9hjg5cwKFmek4HMSoBDgJZN8hKGxih.bin}
  goshimmer.config.json:
    file: ${GOSHIMMER_CONFIG:-./config.docker.json}
  prometheus.yml:
    file: ${PROMETHEUS_CONFIG:-./prometheus.yml}
