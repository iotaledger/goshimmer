version: "3.9"
# Create a custom build that can be re-used within Docker network
x-build-goshimmer: &goshimmer_build
  context: ../../
  args:
    DOWNLOAD_SNAPSHOT: 0
services:
  peer_master:
    build: *goshimmer_build
    stop_grace_period: 1m
    command: >
      --autoPeering.entryNodes=
      --node.seed=base58:8q491c3YWjbPwLmF2WD95YmCgh61j2kenCKHfGfByoWi
      --node.overwriteStoredSeed=true
      --node.enablePlugins="webapitoolsendpoint",spammer,prometheus,WebAPIToolsBlockEndpoint,activity,snapshot
      --node.disablePlugins=portcheck,Firewall,ManaInitializer,RemoteLog,AnalysisClient
      --config=/run/secrets/goshimmer.config.json
      --node.peerDBDirectory=/app/peerdb
      --database.directory=/app/db
      --protocol.snapshot.path=./snapshot.bin
      --metrics.global=true
      --metrics.local=true
      --prometheus.bindAddress=0.0.0.0:9311
      --prometheus.processMetrics=true
      --prometheus.goMetrics=true
      --blockIssuer.ignoreBootstrappedFlag=true
      --protocol.genesisTime=${GENESIS_TIME}
      --profiling.bindAddress=0.0.0.0:6061
    secrets:
      - goshimmer.config.json
    volumes:
      - ./docker-network.snapshot:/app/snapshot.bin
    #      - db:/app/db
    #      - peerdb:/app/peerdb
    ports:
      - "8080:8080/tcp" # web API
      - "8081:8081/tcp" # dashboard
      - "8061:8061/tcp" # dags visualizer
      - "9000:9000/tcp" # analysis dashboard
      - "6081:6061/tcp" # pprof
    expose:
      - 1888/tcp # analysis server
    networks:
      - goshimmer

  peer_replica:
    image: docker-network-peer_master:latest
    stop_grace_period: 1m
    command: >
      --config=/run/secrets/goshimmer.config.json
      --database.directory=/app/mainnetdb
      --node.enablePlugins="webapi tools endpoint",spammer,prometheus,activity
      --node.disablePlugins=portcheck,Firewall,ManaInitializer,RemoteLog,AnalysisClient
      --node.overwriteStoredSeed=true
      --protocol.snapshot.path=./snapshot.bin
      --prometheus.bindAddress=0.0.0.0:9311
      --protocol.genesisTime=${GENESIS_TIME}
      --prometheus.processMetrics=true
      --prometheus.goMetrics=true
    deploy:
      replicas: ${GOSHIMMER_PEER_REPLICAS:-1}
    secrets:
      - goshimmer.config.json
    volumes:
      - ./docker-network.snapshot:/app/snapshot.bin
    networks:
      - goshimmer
    depends_on:
      - peer_master
  peer_master2:
    image: docker-network-peer_master:latest
    stop_grace_period: 1m
    command: >
      --node.seed=base58:4ata8GcTRMJ5sSv2jQJWmSYYTHct748p3tXmCFYm7wjA
      --node.overwriteStoredSeed=true
      --node.enablePlugins="webapitoolsendpoint",activity,spammer,prometheus
      --node.disablePlugins=portcheck,Firewall,ManaInitializer,RemoteLog,AnalysisClient
      --config=/run/secrets/goshimmer.config.json
      --node.peerDBDirectory=/app/peerdb
      --database.directory=/app/db
      --protocol.snapshot.path=./snapshot.bin
      --metrics.global=true
      --metrics.local=true
      --prometheus.bindAddress=0.0.0.0:9311
      --prometheus.processMetrics=true
      --prometheus.goMetrics=true
      --protocol.genesisTime=${GENESIS_TIME}
      --profiling.bindAddress=0.0.0.0:6061
    secrets:
      - goshimmer.config.json
    volumes:
      - ./docker-network.snapshot:/app/snapshot.bin
    ports:
      - "8070:8080/tcp" # web API
      - "8071:8081/tcp" # dashboard
      - "6071:6061/tcp" # pprof
    networks:
      - goshimmer
    depends_on:
      - peer_master
  peer_nomana:
    image: docker-network-peer_master:latest
    stop_grace_period: 1m
    command: >
      --node.enablePlugins="webapitoolsendpoint",spammer,prometheus
      --node.disablePlugins=portcheck,Firewall,ManaInitializer,RemoteLog,AnalysisClient
      --node.peerDBDirectory=/app/peerdb
      --database.directory=/app/db
      --config=/run/secrets/goshimmer.config.json
      --protocol.snapshot.path=./snapshot.bin
      --metrics.global=true
      --metrics.local=true
      --prometheus.bindAddress=0.0.0.0:9311
      --protocol.genesisTime=${GENESIS_TIME}
      --prometheus.processMetrics=true
      --prometheus.goMetrics=true
      --profiling.bindAddress=0.0.0.0:6061
    secrets:
      - goshimmer.config.json
    volumes:
      - ./docker-network.snapshot:/app/snapshot.bin
    ports:
      - "8040:8080/tcp" # web API
      - "8041:8081/tcp" # dashboard
      - "6041:6061/tcp" # pprof
    networks:
      - goshimmer
    depends_on:
      - peer_master
      - faucet

  faucet:
    image: docker-network-peer_master:latest
    stop_grace_period: 1m
    command: >
      --faucet.seed=7R1itJx5hVuo9w9hjg5cwKFmek4HMSoBDgJZN8hKGxih
      --node.seed=base58:3YX6e7AL28hHihZewKdq6CMkEYVsTJBLgRiprUNiNq5E
      --node.overwriteStoredSeed=true
      --node.enablePlugins="webAPIToolsEndpoint",faucet,activity,prometheus,spammer,"WebAPIFaucetEndpoint"
      --node.disablePlugins=portcheck,Firewall,ManaInitializer,RemoteLog,AnalysisClient
      --config=/run/secrets/goshimmer.config.json
      --database.directory=/app/db
      --metrics.global=true
      --metrics.local=true
      --protocol.snapshot.path=./snapshot.bin
      --prometheus.bindAddress=0.0.0.0:9311
      --prometheus.processMetrics=true
      --prometheus.goMetrics=true
      --protocol.genesisTime=${GENESIS_TIME}
      --profiling.bindAddress=0.0.0.0:6061
    secrets:
      - goshimmer.config.json
    volumes:
      - ./docker-network.snapshot:/app/snapshot.bin
    ports:
      - "8090:8080/tcp" # web API
      - "8051:8061/tcp" # dags visualizer
      - "8091:8081/tcp" # dashboard
      - "6091:6061/tcp" # pprof
    networks:
      - goshimmer
    depends_on:
      - peer_master

  prometheus:
    image: prom/prometheus:latest
    profiles:
      - grafana
    ports:
      - "9090:9090"
    command:
      - --config.file=/run/secrets/prometheus.yml
    secrets:
      - prometheus.yml
    networks:
      - goshimmer
    depends_on:
      - peer_master
  grafana:
    image: grafana/grafana:latest
    profiles:
      - grafana
    environment:
      # path to provisioning definitions can only be defined as
      # environment variables for grafana within docker
      - GF_PATHS_PROVISIONING=/var/lib/grafana/provisioning
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=false
    networks:
      - goshimmer
    ports:
      - "3000:3000"
    user: "104"
    volumes:
      - grafana-data-volume:/var/lib/grafana
      - ./grafana/provisioning:/var/lib/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro

# Create our own network
networks:
  goshimmer:
    driver: bridge
# Named Docker volumes for data persistence
# ./run.sh removes these on exit
volumes:
  db:
  peerdb:
  grafana-data-volume:
# read only files to load in the containers that may be shared across containers
secrets:
  goshimmer.block.snapshot.bin:
    file: ${SNAPSHOT_FILE:-./docker-network.snapshot}
  goshimmer.config.json:
    file: ${GOSHIMMER_CONFIG:-./config.docker.json}
  prometheus.yml:
    file: ${PROMETHEUS_CONFIG:-./prometheus.yml}
