{"version":3,"sources":["utils/WS.ts","utils/constants.ts","models/tangle.ts","styles/tangleStyles.ts","graph/vivagraph.ts","stores/TangleStore.tsx","styles/graphStyle.js","styles/cytoscapeStyles.ts","graph/cytoscape.ts","stores/UTXOStore.tsx","stores/ConflictStore.tsx","stores/GlobalStore.tsx","utils/ConflictIDResolver.ts","components/LinkToDashboard.tsx","components/BlockInfo.tsx","components/Legend.tsx","components/TangleDAG.tsx","components/TransactionInfo.tsx","components/UTXODAG.tsx","components/ConflictInfo.tsx","components/ConflictDAG.tsx","components/timeButtons.tsx","components/GlobalSettings.tsx","images/logo_dark.png","components/Root.tsx","index.tsx"],"names":["WSBlkType","handlers","registerHandler","blkType","handler","unregisterHandler","connectWebSocket","path","onOpen","onClose","onError","loc","window","location","uri","protocol","host","ws","WebSocket","onopen","onclose","onerror","onmessage","e","wsBlk","JSON","parse","data","type","parentRefType","COLOR","LINE_TYPE","LINE_WIDTH","VERTEX","CONFLICT","vivagraphLib","init","graph","graphics","layout","renderer","this","addNode","ID","id","removeNode","releaseNode","ui","borderWidth","borderColor","node","getNode","nodeUI","getNodeUI","setUINodeSize","attr","svgUpdateNodePos","getNodePosition","removeAttribute","clear","rect","getGraphRect","centerY","y1","y2","centerX","x1","x2","moveTo","pos","x","y","dispose","pause","resume","getAttribute","initTangleDAG","Viva","Graph","Layout","forceDirected","springLength","springCoeff","stableThreshold","gravity","dragCoeff","timeStep","theta","setupLayout","View","svgGraphics","svgNodeBuilder","placeNode","link","svgLinkBuilder","placeLink","linkUI","fromPos","toPos","toFixed","setupSvgGraphics","ele","document","getElementById","container","setupRenderer","run","svgEl","querySelector","setAttribute","maximizeSvgWindow","drawBlock","blk","vivaLib","blockMap","existing","updateNodeColorOnConfirmation","drawVertexParentReference","parentType","parentIDs","forEach","value","parent","get","isTip","links","some","fromId","updateParentRefUI","addLink","StrongRef","strongParentIDs","WeakRef","weakParentIDs","ShallowLikeRef","shallowLikeParentIDs","selectBlock","selectVertex","setUINodeColor","dfsIterator","setUILinkColor","getLinkUI","unselectBlock","originColor","unselectVertex","forEachLink","resetLinks","updateNodeDataAndColor","nodeID","blkData","nodeExist","drawVertex","isMarker","group","markerAdded","circle","svg","append","drawMarker","size","childNodes","color","isTx","isConfirmed","isTxConfirmed","dx","dy","mark","drawWinnerMark","drawRejectMark","linkID","undefined","refType","setUILink","ShallowDislikeRef","cb","up","cbLinks","seenNodes","push","pointer","length","toId","includes","rx","setCorners","width","TangleStore","blkOrder","lastBlkAddedBeforePause","selected_origin_color","highlightedBlks","Map","draw","vertexChanges","checkLimit","maxTangleVertices","removed","shift","removeBlock","drawExistedBlks","blocks","updateDrawStatus","clearGraph","centerEntireGraph","centerGraph","centerBlk","blkID","centerVertex","removeVertex","paused","selectBlk","clearSelected","clearHighlightedBlks","getNodeColor","updateSelected","getTangleVertex","foundBlks","highlightBlks","blkIDs","original_color","set","clearHighlightedBlk","selectedBlk","getBlksFromConflict","conflictID","searchedMode","blks","conflictIDs","start","registerTangleEvents","stop","unregisterHandlers","addEventListener","tangleOnClick","svgRendererOnResume","forEachNode","idx","indexOf","newBlkToAdd","updateGraph","slice","updateIfNotPaused","makeObservable","Block","addBlock","BlockBooked","setBlockConflict","BlockConfirmed","setBlockConfirmedTime","BlockTxConfirmationStateChanged","updateBlockTxConfirmationState","removeStartIndex","removeBlocks","observable","ObservableMap","action","markerMap","delete","conflict","txConfirmationState","info","confirmationState","confirmationStateTime","num","trimTangleToVerticesLimit","search","trim","event","target","tagName","parentNode","vert","dagreOptions","name","nodeSep","edgeSep","rankSep","rankDir","ranker","minLen","edgeWeight","fit","padding","spacingFactor","nodeDimensionsIncludeLabels","animate","animationDuration","animationEasing","boundingBox","transform","ready","conflictDagreOptions","UTXO","LINE","BRANCH","cytoscapeLib","options","cy","layoutApi","o","cytoscape","use","add","children","remove","select","unselect","center","elements","listener","on","drawTransaction","tx","outputMap","collection","union","classes","inputNodeID","inputLabel","inputs","label","input","spentOutputTx","referencedOutputID","base58","source","outputNodeID","outputLabel","outputs","updateConfirmedTransaction","placeNewNodes","drawSingleConflict","conflictMap","v","updateConfirmedConflict","addClass","drawConflict","a","parents","i","pID","fetch","res","json","drawConflictsUpToMaster","conflicts","parentID","find","b","hasClass","removeClass","removeConfirmationStyle","initUTXODAG","style","selector","shape","height","events","visibility","layoutUtilities","desiredAspectRatio","polyominoGridSizeFactor","utilityFunction","componentSpacing","initConflictDAG","UTXOStore","foundOutputMap","txOrder","highlightedTxs","txToRemoveAfterResume","txToAddAfterResume","layoutUpdateTimerID","maxUTXOVertices","transactions","output","selectTx","txID","getTxsFromConflict","searchMode","txs","foundTxs","resumeAndSyncGraph","drawExistedTxs","drawFoundVertex","highlightTxs","txIDs","clearHighlightedTxs","centerTx","updateLayoutTimer","setInterval","updateLayout","dagre","addNodeEventListener","evt","nodeData","clearInterval","Transaction","addTransaction","TransactionBooked","setTxConflict","TransactionConfirmationStateChanged","transactionConfirmationStateChanged","removeTxs","t","utxoConfirmationState","outputID","bookedTx","setTXConfirmationStateTime","updateUTXO","selectedTx","removePreSelectedNode","trimTxToVerticesLimit","ConflictStore","conflictsBeforeSearching","conflictOrder","highlightedConflicts","conflictToRemoveAfterResume","conflictToAddAfterResume","maxConflictVertices","getConflictVertex","foundConflicts","drawExistedConflicts","values","highlightConflicts","clearHighlightedConflicts","selectConflict","selectedConflict","centerConflict","addMasterConflict","master","aw","Conflict","addConflict","ConflictParentsUpdate","updateParents","ConflictConfirmationStateChanged","conflictConfirmationStateChanged","ConflictWeightChanged","conflictWeightChanged","removeConflicts","newParents","weight","trimConflictToVerticesLimit","GlobalStore","tangleStore","utxoStore","conflictStore","searchResult","syncWithBlk","syncWithTx","syncWithConflict","clearSync","updateSearchResults","results","moment","searchStartingTime","clearFoundBlks","clearFoundTxs","clearFoundConflicts","unix","manualPicker","addr","explorerAddress","dateTime","searchEndingTime","searchResponse","previewResponseSize","response","numOfConflicts","numOfBlocks","numOfTransactions","updatePreviewSearchResponse","result","status","updateSearchResponse","error","updatePreviewResponseSize","console","log","stopDrawNewVertices","clearGraphs","addFoundBlk","addFoundTx","addFoundConflict","clearFoundVertices","clearSelectedVertices","drawNewVertices","resolveBase58ConflictID","base58Conflict","MasterConflictInBase58","UndefinedConflictInBase58","LazyBookedConflictsConflictInBase58","InvalidConflictInBase58","LinkToDashboard","inject","observer","props","route","title","globalStore","href","rel","React","BlockInfo","className","Card","Body","Title","ListGroup","variant","Item","map","p","toString","dateformat","Date","TangleLegend","nodeLabels","nodeColors","linkLabels","linksColors","linkTypes","legendItemsNodes","legendItemsLinks","backgroundColor","borderBottom","UTXOLegend","ConflictLegend","TangleDAG","pauseResumeVisualizer","pauseResume","updateVerticesLimit","updateSearch","searchAndSelect","key","state","open","Container","onClick","setState","prevState","Collapse","in","Row","xs","Col","display","justifyContent","InputGroup","OverlayTrigger","trigger","placement","overlay","Popover","Button","Text","FormControl","placeholder","onChange","onKeyUp","TransactionInfo","UTXODAG","isIdle","ConflictInfo","ConflictDAG","searchAndHighlight","TimePickerButtons","setCurrent","m","updateSearchTimes","addTime","isStartTime","updateSearchStartingTime","updateStartManualPicker","updateSearchEndingTime","updateEndManualPicker","subTime","subtract","Picker","updateFrom","date","isMoment","updateTo","updateFunc","onOpenFunc","dateFormat","timeFormat","GlobalSettings","searchVerticesInLedger","searching","searchAndDrawResults","then","clearSearch","clearSearchAndResume","updateFormInput","setExplorerAddress","updateExplorerAddress","onOpenStartPicker","onOpenEndPicker","renderSearchResults","searchOpen","dashboardUrlOpen","syncOpen","pickerStartValue","pickerEndValue","md","disabled","marginTop","Root","connect","reconnect","setTimeout","Navbar","src","logo","alt","stores","ReactDOM"],"mappings":"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","file":"static/js/main.7a5c12d5.chunk.js","sourcesContent":["export enum WSBlkType {\n    Block,\n    BlockBooked,\n    BlockConfirmed,\n    BlockTxConfirmationStateChanged,\n    Transaction,\n    TransactionBooked,\n    TransactionConfirmationStateChanged,\n    Conflict,\n    ConflictParentsUpdate,\n    ConflictConfirmationStateChanged,\n    ConflictWeightChanged\n}\n\nexport interface WSBlock {\n    type: number;\n    data: any;\n}\n\ntype DataHandler = (data: any) => void;\n\nconst handlers = {};\n\nexport function registerHandler(blkType: number, handler: DataHandler) {\n    handlers[blkType] = handler;\n}\n\nexport function unregisterHandler(blkType: number) {\n    delete handlers[blkType];\n}\n\nexport function connectWebSocket(path: string, onOpen, onClose, onError) {\n    const loc = window.location;\n    let uri = 'ws:';\n\n    if (loc.protocol === 'https:') {\n        uri = 'wss:';\n    }\n    uri += '//' + loc.host + path;\n    //uri += '//' + path;\n    const ws = new WebSocket(uri);\n\n    ws.onopen = onOpen;\n    ws.onclose = onClose;\n    ws.onerror = onError;\n\n    ws.onmessage = (e) => {\n        const wsBlk: WSBlock = JSON.parse(e.data);\n        const handler: DataHandler = handlers[wsBlk.type];\n        if (handler != null) {\n            handler(wsBlk.data);\n        }\n    };\n}\n","export const MAX_VERTICES = 500;\nexport const DEFAULT_DASHBOARD_URL = 'http://localhost:8081';\nexport const DATE_FORMAT = 'DD/MM/YY';\nexport const TIME_FORMAT = 'h:mm:ss';\n","export class tangleVertex {\n    ID: string;\n    strongParentIDs: Array<string>;\n    weakParentIDs: Array<string>;\n    shallowLikeParentIDs: Array<string>;\n    conflictIDs: Array<string>;\n    isMarker: boolean;\n    isTx: boolean;\n    txID: string;\n    isTip: boolean;\n    isConfirmed: boolean;\n    isTxConfirmed: boolean;\n    confirmationState: string;\n    confirmationStateTime: number;\n}\n\nexport class tangleBooked {\n    ID: string;\n    isMarker: boolean;\n    conflictIDs: Array<string>;\n}\n\nexport class tangleConfirmed {\n    ID: string;\n    confirmationState: string;\n    confirmationStateTime: number;\n}\n\nexport class tangleTxConfirmationStateChanged {\n    ID: string;\n    isConfirmed: boolean;\n}\n\nexport enum parentRefType {\n    StrongRef,\n    WeakRef,\n    ShallowLikeRef,\n    ShallowDislikeRef\n}\n","export const COLOR = {\n    MESSAGE_PENDING: '#b9d6dc',\n    MESSAGE_CONFIRMED: '#5296A5',\n    TRANSACTION_PENDING: '#e5daa3',\n    TRANSACTION_CONFIRMED: '#F0C808',\n    TIP: '#A31621',\n    NODE_SELECTED: '#61E294',\n    NODE_BORDER_SELECTED: '#61E294',\n    NODE_UNKNOWN: '#b58900',\n    LINK_WEAK: '#E7DFC6',\n    LINK_STRONG: '#36636D',\n    LINK_SHALLOW_LIKED: '#10f008',\n    LINK_SHALLOW_DISLIKED: '#f00808',\n    LINK_FUTURE_CONE: '#EF8354',\n    LINK_PAST_CONE: '#B91372',\n    MARKER: '#05445E'\n};\n\nexport const LINE_TYPE = {\n    STRONG: '-',\n    WEAK: '5 2',\n    SHALLOW_LIKED: '2 3',\n    SHALLOW_DISLIKED: '2 3'\n};\n\nexport const LINE_WIDTH = {\n    STRONG: 3,\n    WEAK: 2,\n    SHALLOW_LIKED: 2,\n    SHALLOW_DISLIKED: 2\n};\n\nexport const VERTEX = {\n    SIZE_DEFAULT: 30,\n    SIZE_SELECTED: 35,\n    ROUNDED_CORNER: 5,\n    SELECTED_BORDER_WIDTH: 4,\n    MARKER_SIZE: 4\n};\n\nexport const CONFLICT = {\n    WINNER_COLOR: '#739A25',\n    LOOSER_COLOR: '#A31621',\n    WIDTH: 6,\n};\n","import { IGraph } from './graph';\nimport { default as Viva } from 'vivagraphjs';\nimport { parentRefType, tangleVertex } from 'models/tangle';\nimport {COLOR, CONFLICT, LINE_TYPE, LINE_WIDTH, VERTEX} from 'styles/tangleStyles';\nimport { ObservableMap } from 'mobx';\n\nexport class vivagraphLib implements IGraph {\n    graph;\n    graphics;\n    layout;\n    renderer;\n\n    constructor(init: () => any) {\n        [this.graph, this.layout, this.graphics, this.renderer] = init();\n    }\n\n    drawVertex(data: any): void {\n        this.graph.addNode(data.ID, data);\n    }\n\n    removeVertex(id: string): void {\n        this.graph.removeNode(id);\n    }\n\n    releaseNode(id: string): void {\n        this.graphics.releaseNode(id);\n    }\n\n    selectVertex(id: string): void {\n        // only size, border and position are changed.\n        const node = this.graph.getNode(id);\n        const nodeUI = this.graphics.getNodeUI(id);\n        if (!nodeUI) {\n            return;\n        }\n        setUINodeSize(nodeUI, VERTEX.SIZE_SELECTED);\n        setRectBorder(\n            nodeUI,\n            VERTEX.SELECTED_BORDER_WIDTH,\n            COLOR.NODE_BORDER_SELECTED\n        );\n\n        const pos = this.layout.getNodePosition(node.id);\n        svgUpdateNodePos(nodeUI, pos);\n    }\n\n    unselectVertex(id: string): void {\n        const nodeUI = this.graphics.getNodeUI(id);\n        if (!nodeUI) {\n            return;\n        }\n        setUINodeSize(nodeUI, VERTEX.SIZE_DEFAULT);\n        resetRectBorder(nodeUI);\n    }\n\n    clearGraph(): void {\n        this.graph.clear();\n    }\n\n    centerGraph(): void {\n        const rect = this.layout.getGraphRect();\n        const centerY = (rect.y1 + rect.y2) / 2;\n        const centerX = (rect.x1 + rect.x2) / 2;\n\n        this.renderer.moveTo(centerX, centerY);\n    }\n\n    centerVertex(id: string): void {\n        const pos = this.layout.getNodePosition(id);\n        this.renderer.moveTo(pos.x, pos.y);\n    }\n\n    stop(): void {\n        this.renderer.dispose();\n        this.graph = null;\n    }\n\n    pause(): void {\n        this.renderer.pause();\n    }\n\n    resume(): void {\n        this.renderer.resume();\n    }\n\n    getNodeColor(id: string): string {\n        const nodeUI = this.graphics.getNodeUI(id);\n        if (!nodeUI) {\n            return '';\n        }\n        return getUINodeColor(nodeUI);\n    }\n\n    nodeExist(id: string): boolean {\n        const nodeUI = this.graphics.getNodeUI(id);\n        if (!nodeUI) {\n            return false;\n        }\n        return true;\n    }\n}\n\nexport function initTangleDAG() {\n    const graph = Viva.Graph.graph();\n    const layout = setupLayout(graph);\n    const graphics = setupSvgGraphics();\n    const renderer = setupRenderer(graph, graphics, layout);\n    renderer.run();\n    maximizeSvgWindow();\n\n    return [graph, layout, graphics, renderer];\n}\n\nfunction setupLayout(graph: any) {\n    return Viva.Graph.Layout.forceDirected(graph, {\n        springLength: 10,\n        springCoeff: 0.0001,\n        stableThreshold: 0.15,\n        gravity: -2,\n        dragCoeff: 0.02,\n        timeStep: 20,\n        theta: 0.8\n    });\n}\n\nfunction setupSvgGraphics() {\n    const graphics: any = Viva.Graph.View.svgGraphics();\n\n    graphics\n        .node(() => {\n            return svgNodeBuilder();\n        })\n        .placeNode(svgUpdateNodePos);\n\n    graphics\n        .link(() => {\n            return svgLinkBuilder(\n                COLOR.LINK_STRONG,\n                LINE_WIDTH.STRONG,\n                LINE_TYPE.STRONG\n            );\n        })\n        .placeLink(function(linkUI, fromPos, toPos) {\n            // linkUI - is the object returned from link() callback above.\n            const data =\n                'M' +\n                fromPos.x.toFixed(2) +\n                ',' +\n                fromPos.y.toFixed(2) +\n                'L' +\n                toPos.x.toFixed(2) +\n                ',' +\n                toPos.y.toFixed(2);\n\n            // 'Path data' (http://www.w3.org/TR/SVG/paths.html#DAttribute )\n            // is a common way of rendering paths in SVG:\n            linkUI.attr('d', data);\n        });\n\n    return graphics;\n}\n\nfunction setupRenderer(graph: any, graphics: any, layout: any) {\n    const ele = document.getElementById('tangleVisualizer');\n\n    return Viva.Graph.View.renderer(graph, {\n        container: ele,\n        graphics: graphics,\n        layout: layout\n    });\n}\n\nexport function drawBlock(\n    blk: tangleVertex,\n    vivaLib: vivagraphLib,\n    blockMap: ObservableMap<string, tangleVertex>\n) {\n    let node;\n    const existing = vivaLib.graph.getNode(blk.ID);\n    if (existing) {\n        node = existing;\n    } else {\n        node = vivaLib.graph.addNode(blk.ID, blk);\n        updateNodeColorOnConfirmation(blk, vivaLib);\n    }\n\n    const drawVertexParentReference = (\n        parentType: parentRefType,\n        parentIDs: Array<string>\n    ) => {\n        if (parentIDs) {\n            parentIDs.forEach((value) => {\n                // remove tip status\n                const parent = blockMap.get(value);\n                if (parent) {\n                    parent.isTip = false;\n                    updateNodeColorOnConfirmation(parent, vivaLib);\n                }\n\n                // if value is valid AND (links is empty OR there is no between parent and children)\n                if (\n                    value &&\n                    (!node.links ||\n                        !node.links.some((link) => link.fromId === value))\n                ) {\n                    // draw the link only when the parent exists\n                    const existing = vivaLib.graph.getNode(value);\n                    if (existing) {\n                        const link = vivaLib.graph.addLink(value, blk.ID);\n                        updateParentRefUI(link.id, vivaLib, parentType);\n                    }\n                }\n            });\n        }\n    };\n    drawVertexParentReference(parentRefType.StrongRef, blk.strongParentIDs);\n    drawVertexParentReference(parentRefType.WeakRef, blk.weakParentIDs);\n    drawVertexParentReference(parentRefType.ShallowLikeRef, blk.shallowLikeParentIDs);\n}\n\nexport function selectBlock(id: string, vivaLib: vivagraphLib) {\n    vivaLib.selectVertex(id);\n\n    const node = vivaLib.graph.getNode(id);\n    const nodeUI = vivaLib.graphics.getNodeUI(id);\n    if (!nodeUI) {\n        return;\n    }\n\n    setUINodeColor(nodeUI, COLOR.NODE_SELECTED);\n\n    const seenForward = [];\n    const seenBackwards = [];\n    dfsIterator(\n        vivaLib.graph,\n        node,\n        () => {\n            return false;\n        },\n        true,\n        (link) => {\n            const linkUI = vivaLib.graphics.getLinkUI(link.id);\n            setUILinkColor(linkUI, COLOR.LINK_FUTURE_CONE);\n        },\n        seenForward\n    );\n    dfsIterator(\n        vivaLib.graph,\n        node,\n        () => {\n            return false;\n        },\n        false,\n        (link) => {\n            const linkUI = vivaLib.graphics.getLinkUI(link.id);\n            setUILinkColor(linkUI, COLOR.LINK_PAST_CONE);\n        },\n        seenBackwards\n    );\n\n    return node;\n}\n\nexport function unselectBlock(\n    id: string,\n    originColor: string,\n    vivaLib: vivagraphLib\n) {\n    vivaLib.unselectVertex(id);\n\n    // clear link highlight\n    const node = vivaLib.graph.getNode(id);\n    if (!node) {\n        // clear links\n        resetLinks(vivaLib);\n        return;\n    }\n\n    const nodeUI = vivaLib.graphics.getNodeUI(id);\n    setUINodeColor(nodeUI, originColor);\n\n    const seenForward = [];\n    const seenBackwards = [];\n    dfsIterator(\n        vivaLib.graph,\n        node,\n        () => {\n            return false;\n        },\n        true,\n        (link) => {\n            updateParentRefUI(link.id, vivaLib);\n        },\n        seenBackwards\n    );\n    dfsIterator(\n        vivaLib.graph,\n        node,\n        () => {\n            return false;\n        },\n        false,\n        (link) => {\n            updateParentRefUI(link.id, vivaLib);\n        },\n        seenForward\n    );\n}\n\nexport function updateGraph(\n    vivaLib: vivagraphLib,\n    newBlkToAdd: string[],\n    blockMap: ObservableMap<string, tangleVertex>\n) {\n    vivaLib.graph.forEachNode((node) => {\n        const blk = blockMap.get(node.id);\n        if (!blk) {\n            vivaLib.removeVertex(node.id);\n        } else {\n            updateNodeDataAndColor(blk.ID, blk, vivaLib);\n        }\n    });\n\n    // new blocks to add after pause.\n    for (const blkID of newBlkToAdd) {\n        const blk = blockMap.get(blkID);\n        if (blk) {\n            drawBlock(blk, vivaLib, blockMap);\n            updateNodeColorOnConfirmation(blk, vivaLib);\n        }\n    }\n}\n\n// pause was short - clear only the needed part on left from this.lastBlkAddedBeforePause\nexport function reloadAfterShortPause(\n    vivaLib: vivagraphLib,\n    blockMap: ObservableMap<string, tangleVertex>\n) {\n    vivaLib.graph.forEachNode((node) => {\n        const blk = blockMap.get(node.id);\n        if (!blk) {\n            vivaLib.graph.removeNode(node.id);\n        } else {\n            updateNodeDataAndColor(blk.ID, blk, vivaLib);\n        }\n    });\n}\n\nexport function updateNodeDataAndColor(\n    nodeID: string,\n    blkData: tangleVertex,\n    vivaLib: vivagraphLib\n) {\n    const exists = vivaLib.nodeExist(nodeID);\n    // replace existing node data\n    if (exists && blkData) {\n        vivaLib.drawVertex(blkData);\n        updateNodeColorOnConfirmation(blkData, vivaLib);\n        if (blkData.isMarker) {\n            drawMarker(blkData.ID, vivaLib);\n        }\n\n    }\n\n}\n\nfunction drawMarker(id: string, vivaLib: vivagraphLib) {\n    const group = vivaLib.graphics.getNodeUI(id);\n    // check if the node already has a marker.\n    if (group.markerAdded) {\n        return;\n    }\n\n    const circle = Viva.Graph.svg('circle');\n    circle\n        .attr('fill', COLOR.MARKER)\n        .attr('r', VERTEX.MARKER_SIZE)\n        .attr('cx', VERTEX.SIZE_DEFAULT / 2)\n        .attr('cy', VERTEX.SIZE_DEFAULT / 2);\n\n    group.markerAdded = true;\n    group.append(circle);\n}\n\nfunction drawRejectMark(id: string, vivaLib: vivagraphLib) {\n    const group = vivaLib.graphics.getNodeUI(id);\n\n    const x = VERTEX.SIZE_DEFAULT/5;\n    const y = VERTEX.SIZE_DEFAULT/4;\n    const dx = VERTEX.SIZE_DEFAULT/8;\n    const dy = VERTEX.SIZE_DEFAULT/8;\n    const mark = Viva.Graph.svg('polyline');\n    mark\n        .attr('stroke', CONFLICT.LOOSER_COLOR)\n        .attr('stroke-width',  CONFLICT.WIDTH)\n        .attr('points', `${-x+dx}, ${y+dy} ${dx}, ${dy} ${x+dx}, ${y+dy} ${-x+dx}, ${-y+dy}  ${dx},\n          ${dy} ${x+dx}, ${-y+dy}`);\n\n    group.append(mark);\n}\n\nfunction drawWinnerMark(id: string, vivaLib: vivagraphLib) {\n    const group = vivaLib.graphics.getNodeUI(id);\n\n    const x = VERTEX.SIZE_DEFAULT/5;\n    const y = VERTEX.SIZE_DEFAULT/4;\n    const dx = VERTEX.SIZE_DEFAULT/8;\n    const dy = VERTEX.SIZE_DEFAULT/8;\n    const mark = Viva.Graph.svg('polyline');\n    mark\n        .attr('stroke', CONFLICT.WINNER_COLOR)\n        .attr('stroke-width',  CONFLICT.WIDTH)\n        .attr('points', `${-x+dx}, ${-y+dy} ${dx}, ${dy} ${2*x+dx}, ${-2*y+dy} ${dx}, ${dy}`);\n\n    group.append(mark);\n}\n\nfunction svgUpdateNodePos(nodeUI, pos) {\n    const rectUI = nodeUI.childNodes[0];\n    const size = rectUI.getAttribute('width');\n\n    nodeUI.attr(\n        'transform',\n        'translate(' + (pos.x - size / 2) + ',' + (pos.y - size / 2) + ')'\n    );\n}\n\nfunction resetLinks(vivaLib: vivagraphLib) {\n    vivaLib.graph.forEachLink((link) => {\n        updateParentRefUI(link.id, vivaLib);\n    });\n}\n\nfunction updateNodeColorOnConfirmation(\n    blk: tangleVertex,\n    vivaLib: vivagraphLib\n) {\n    const nodeUI = vivaLib.graphics.getNodeUI(blk.ID);\n    if (!nodeUI) return;\n    if (blk.isTip) return;\n\n    let color = '';\n    color = blk.isTx ? COLOR.TRANSACTION_PENDING : COLOR.MESSAGE_PENDING;\n    if (blk.isConfirmed) {\n        color = blk.isTx\n            ? COLOR.TRANSACTION_CONFIRMED\n            : COLOR.MESSAGE_CONFIRMED;\n    }\n    if (blk.isTx && blk.isConfirmed) {\n        blk.isTxConfirmed ? drawWinnerMark(blk.ID, vivaLib) : drawRejectMark(blk.ID, vivaLib);\n    }\n    setUINodeColor(nodeUI.childNodes[0], color);\n}\n\nfunction updateParentRefUI(\n    linkID: string,\n    vivaLib: vivagraphLib,\n    parentType?: parentRefType\n) {\n    // update link line type and color based on reference type\n    const linkUI = vivaLib.graphics.getLinkUI(linkID);\n    if (!linkUI) {\n        return;\n    }\n    // if type not provided look for refType data if not found use strong ref style\n    if (parentType === undefined) {\n        parentType = linkUI.refType || parentRefType.StrongRef;\n    }\n\n    switch (parentType) {\n    case parentRefType.StrongRef: {\n        setUILink(linkUI, COLOR.LINK_STRONG, LINE_WIDTH.STRONG, LINE_TYPE.STRONG);\n        linkUI.refType = parentRefType.StrongRef;\n        break;\n    }\n    case parentRefType.WeakRef: {\n        setUILink(linkUI, COLOR.LINK_WEAK, LINE_WIDTH.WEAK, LINE_TYPE.WEAK);\n        linkUI.refType = parentRefType.WeakRef;\n        break;\n    }\n    case parentRefType.ShallowLikeRef: {\n        setUILink(linkUI, COLOR.LINK_SHALLOW_LIKED, LINE_WIDTH.SHALLOW_LIKED, LINE_TYPE.SHALLOW_LIKED);\n        linkUI.refType = parentRefType.ShallowLikeRef;\n        break;\n    }\n    case parentRefType.ShallowDislikeRef: {\n        setUILink(linkUI, COLOR.LINK_SHALLOW_DISLIKED, LINE_WIDTH.SHALLOW_DISLIKED, LINE_TYPE.SHALLOW_DISLIKED);\n        linkUI.refType = parentRefType.ShallowDislikeRef;\n        break;\n    }\n    }\n}\n\n// copied over and refactored from https://github.com/glumb/IOTAtangle\nfunction dfsIterator(\n    graph,\n    node,\n    cb,\n    up,\n    cbLinks: any = false,\n    seenNodes = []\n) {\n    seenNodes.push(node);\n    let pointer = 0;\n\n    while (seenNodes.length > pointer) {\n        const node = seenNodes[pointer++];\n\n        if (cb(node)) return true;\n\n        for (const link of node.links || []) {\n            if (cbLinks) cbLinks(link);\n\n            if (\n                !up &&\n                link.toId === node.id &&\n                !seenNodes.includes(graph.getNode(link.fromId))\n            ) {\n                seenNodes.push(graph.getNode(link.fromId));\n                continue;\n            }\n\n            if (\n                up &&\n                link.fromId === node.id &&\n                !seenNodes.includes(graph.getNode(link.toId))\n            ) {\n                seenNodes.push(graph.getNode(link.toId));\n            }\n        }\n    }\n}\n\nconst svgNodeBuilder = function(): any {\n    const group = Viva.Graph.svg('g');\n\n    const ui = Viva.Graph.svg('rect');\n    setUINodeColor(ui, COLOR.TIP);\n    setUINodeSize(ui, VERTEX.SIZE_DEFAULT);\n    setCorners(ui, VERTEX.ROUNDED_CORNER);\n\n    group.append(ui);\n\n    return group;\n};\n\nconst svgLinkBuilder = function(color: string, width: number, type: string) {\n    return Viva.Graph.svg('path')\n        .attr('stroke', color)\n        .attr('stroke-width', width)\n        .attr('stroke-dasharray', type);\n};\n\nfunction maximizeSvgWindow() {\n    const svgEl = document.querySelector('#tangleVisualizer>svg');\n    svgEl.setAttribute('width', '100%');\n    svgEl.setAttribute('height', '100%');\n}\n\nfunction setUINodeColor(ui: any, color: any) {\n    ui.attr('fill', color);\n}\n\nfunction setUILinkColor(ui: any, color: any) {\n    ui.attr('stroke', color);\n}\n\nfunction getUINodeColor(ui: any): string {\n    return ui.getAttribute('fill');\n}\n\nfunction setUINodeSize(ui: any, size: number) {\n    ui.attr('width', size);\n    ui.attr('height', size);\n}\n\nfunction setUILink(ui: any, color: string, width: number, type: string) {\n    ui.attr('stroke-width', width);\n    ui.attr('stroke-dasharray', type);\n    ui.attr('stroke', color);\n}\n\nfunction setCorners(ui: any, rx: number) {\n    ui.attr('rx', rx);\n}\n\nfunction setRectBorder(ui: any, borderWidth: number, borderColor) {\n    ui.attr('stroke-width', borderWidth);\n    ui.attr('stroke', borderColor);\n}\n\nfunction resetRectBorder(ui: any) {\n    ui.removeAttribute('stroke-width');\n    ui.removeAttribute('stroke');\n}\n","import { action, makeObservable, observable, ObservableMap } from 'mobx';\nimport { registerHandler, unregisterHandler, WSBlkType } from 'utils/WS';\nimport { MAX_VERTICES } from 'utils/constants';\nimport {\n    tangleBooked,\n    tangleConfirmed,\n    tangleTxConfirmationStateChanged,\n    tangleVertex\n} from 'models/tangle';\nimport {\n    drawBlock,\n    initTangleDAG,\n    reloadAfterShortPause,\n    selectBlock,\n    unselectBlock,\n    updateGraph,\n    updateNodeDataAndColor,\n    vivagraphLib\n} from 'graph/vivagraph';\n\nexport class TangleStore {\n    @observable maxTangleVertices = MAX_VERTICES;\n    @observable blocks = new ObservableMap<string, tangleVertex>();\n    @observable foundBlks = new ObservableMap<string, tangleVertex>();\n    // might still need markerMap for advanced features\n    @observable markerMap = new ObservableMap<string, Array<string>>();\n    @observable selectedBlk: tangleVertex = null;\n    @observable paused = false;\n    @observable search = '';\n    blkOrder: Array<string> = [];\n    lastBlkAddedBeforePause = '';\n    selected_origin_color = '';\n    highlightedBlks = new Map<string, string>();\n    draw = true;\n    vertexChanges = 0;\n    graph;\n\n    constructor() {\n        makeObservable(this);\n\n        registerHandler(WSBlkType.Block, this.addBlock);\n        registerHandler(WSBlkType.BlockBooked, this.setBlockConflict);\n        registerHandler(\n            WSBlkType.BlockConfirmed,\n            this.setBlockConfirmedTime\n        );\n        registerHandler(WSBlkType.BlockTxConfirmationStateChanged, this.updateBlockTxConfirmationState);\n    }\n\n    unregisterHandlers() {\n        unregisterHandler(WSBlkType.Block);\n        unregisterHandler(WSBlkType.BlockBooked);\n        unregisterHandler(WSBlkType.BlockConfirmed);\n        unregisterHandler(WSBlkType.BlockTxConfirmationStateChanged);\n    }\n\n    @action\n    addBlock = (blk: tangleVertex) => {\n        this.checkLimit();\n\n        blk.isTip = true;\n        this.blkOrder.push(blk.ID);\n        this.blocks.set(blk.ID, blk);\n\n        if (this.draw && !this.paused) {\n            this.drawVertex(blk);\n        }\n    };\n\n    checkLimit = () => {\n        if (this.blkOrder.length >= this.maxTangleVertices) {\n            const removed = this.blkOrder.shift();\n            this.removeBlock(removed);\n        }\n    };\n\n    @action\n    addFoundBlk = (blk: tangleVertex) => {\n        this.foundBlks.set(blk.ID, blk);\n    };\n\n    @action\n    clearFoundBlks = () => {\n        this.foundBlks.clear();\n    };\n\n    @action\n    removeBlock = (blkID: string) => {\n        const blk = this.blocks.get(blkID);\n        if (blk) {\n            if (blk.isMarker) {\n                this.markerMap.delete(blkID);\n            }\n            this.removeVertex(blkID);\n            this.blocks.delete(blkID);\n        }\n    };\n\n    @action\n    setBlockConflict = (conflict: tangleBooked) => {\n        const blk = this.blocks.get(conflict.ID);\n        if (!blk) {\n            return;\n        }\n\n        blk.conflictIDs = conflict.conflictIDs;\n        blk.isMarker = conflict.isMarker;\n\n        this.blocks.set(blk.ID, blk);\n        if (this.draw) {\n            this.updateIfNotPaused(blk);\n        }\n    };\n\n    @action\n    updateBlockTxConfirmationState = (txConfirmationState: tangleTxConfirmationStateChanged) => {\n        const blk = this.blocks.get(txConfirmationState.ID);\n        if (!blk) {\n            return;\n        }\n\n        if (txConfirmationState.isConfirmed) {\n            blk.isTxConfirmed = true;\n        } else {\n            blk.isTxConfirmed = false;\n        }\n\n        this.blocks.set(blk.ID, blk);\n        if (this.draw) {\n            this.updateIfNotPaused(blk);\n        }\n    };\n\n    @action\n    setBlockConfirmedTime = (info: tangleConfirmed) => {\n        const blk = this.blocks.get(info.ID);\n        if (!blk) {\n            return;\n        }\n\n        blk.confirmationState = info.confirmationState;\n        blk.isConfirmed = true;\n        blk.confirmationStateTime = info.confirmationStateTime;\n        this.blocks.set(blk.ID, blk);\n        if (this.draw) {\n            this.updateIfNotPaused(blk);\n        }\n    };\n\n    @action\n    pauseResume = () => {\n        if (this.paused) {\n            this.graph.resume();\n            this.paused = false;\n            this.svgRendererOnResume();\n            return;\n        }\n        this.lastBlkAddedBeforePause = this.blkOrder[this.blkOrder.length - 1];\n        this.graph.pause();\n        this.paused = true;\n    };\n\n    @action\n    updateVerticesLimit = (num: number) => {\n        this.maxTangleVertices = num;\n        this.trimTangleToVerticesLimit();\n    };\n\n    @action\n    updateSearch = (search: string) => {\n        this.search = search.trim();\n    };\n\n    @action\n    searchAndSelect = () => {\n        if (!this.search) return;\n\n        this.selectBlk(this.search);\n        this.centerBlk(this.search);\n    };\n\n    drawExistedBlks = () => {\n        this.blocks.forEach((blk) => {\n            this.drawVertex(blk);\n        });\n    };\n\n    updateDrawStatus = (draw: boolean) => {\n        this.draw = draw;\n    };\n\n    clearGraph = () => {\n        this.graph.clearGraph();\n    };\n\n    centerEntireGraph = () => {\n        this.graph.centerGraph();\n    };\n\n    centerBlk = (blkID: string) => {\n        this.graph.centerVertex(blkID);\n    };\n\n    drawVertex = (blk: tangleVertex) => {\n        drawBlock(blk, this.graph, this.blocks);\n    };\n\n    removeVertex = (blkID: string) => {\n        // svg renderer does not stop elements from being removed from the view while being paused\n        // after resume() we update graph state with svgRendererOnResume()\n        if (this.paused) {\n            return;\n        } else {\n            this.graph.removeVertex(blkID);\n        }\n        // release svg graphic from rendering\n        this.graph.releaseNode(blkID);\n    };\n\n    @action\n    tangleOnClick = (event: any) => {\n        // block is currently selected\n        if (event.target.tagName === 'rect') {\n            this.selectBlk(event.target.parentNode.node.id);\n        } else {\n            if (this.selectedBlk !== null) {\n                this.clearSelected();\n            }\n        }\n    };\n\n    @action\n    updateSelected = (vert: tangleVertex) => {\n        if (!vert) return;\n\n        this.selectedBlk = vert;\n    };\n\n    selectBlk = (blkID: string) => {\n        // clear pre-selected node first\n        this.clearSelected();\n        this.clearHighlightedBlks();\n\n        this.selected_origin_color = this.graph.getNodeColor(blkID);\n        const node = selectBlock(blkID, this.graph);\n\n        this.updateSelected(node.data);\n    };\n\n    @action\n    clearSelected = () => {\n        if (!this.selectedBlk) {\n            return;\n        }\n        this.clearHighlightedBlk(this.selectedBlk.ID);\n        this.selectedBlk = null;\n    };\n\n    getTangleVertex = (blkID: string) => {\n        return this.blocks.get(blkID) || this.foundBlks.get(blkID);\n    };\n\n    highlightBlks = (blkIDs: string[]) => {\n        this.clearHighlightedBlks();\n\n        // update highlighted blks and its original color\n        blkIDs.forEach((id) => {\n            const original_color = this.graph.getNodeColor(id);\n            selectBlock(id, this.graph);\n            this.highlightedBlks.set(id, original_color);\n        });\n    };\n\n    clearHighlightedBlks = () => {\n        if (this.highlightedBlks.size === 0) {\n            return;\n        }\n        this.highlightedBlks.forEach((color: string, id) => {\n            this.clearHighlightedBlk(id);\n        });\n        this.highlightedBlks.clear();\n    };\n\n    clearHighlightedBlk = (blkID: string) => {\n        let color = '';\n        if (this.selectedBlk && blkID === this.selectedBlk.ID) {\n            color = this.selected_origin_color;\n        } else {\n            color = this.highlightedBlks.get(blkID);\n        }\n\n        unselectBlock(blkID, color, this.graph);\n    };\n\n    getBlksFromConflict = (conflictID: string, searchedMode: boolean) => {\n        const blks = [];\n\n        if (searchedMode) {\n            this.foundBlks.forEach((blk: tangleVertex) => {\n                if (blk.conflictIDs.includes(conflictID)) {\n                    blks.push(blk.ID);\n                }\n            });\n            return blks;\n        }\n\n        this.blocks.forEach((blk: tangleVertex) => {\n            if (blk.conflictIDs.includes(conflictID)) {\n                blks.push(blk.ID);\n            }\n        });\n\n        return blks;\n    };\n\n    start = () => {\n        this.graph = new vivagraphLib(initTangleDAG);\n\n        this.registerTangleEvents();\n    };\n\n    stop = () => {\n        this.unregisterHandlers();\n        this.graph.stop();\n        this.selectedBlk = null;\n    };\n\n    registerTangleEvents = () => {\n        const tangleWindowEl = document.querySelector('#tangleVisualizer');\n        tangleWindowEl.addEventListener('click', this.tangleOnClick);\n    };\n\n    // For svg renderer, pausing is not going to stop elements from being added or remover from svg frame\n    // when pause we are skipping addVertex function, and trigget this function on resume to reload blocks\n    svgRendererOnResume = () => {\n        // if pause was long enough for newest added block to be removed then clear all graph at once\n        if (!this.blocks.get(this.lastBlkAddedBeforePause)) {\n            this.clearGraph();\n            this.drawExistedBlks();\n            return;\n        }\n        reloadAfterShortPause(this.graph, this.blocks);\n\n        const idx = this.blkOrder.indexOf(this.lastBlkAddedBeforePause);\n        updateGraph(this.graph, this.blkOrder.slice(idx), this.blocks);\n    };\n\n    updateIfNotPaused = (blk: tangleVertex) => {\n        if (!this.paused) {\n            updateNodeDataAndColor(blk.ID, blk, this.graph);\n        }\n    };\n\n    trimTangleToVerticesLimit() {\n        if (this.blkOrder.length >= this.maxTangleVertices) {\n            const removeStartIndex =\n                this.blkOrder.length - this.maxTangleVertices;\n            const removed = this.blkOrder.slice(0, removeStartIndex);\n            this.blkOrder = this.blkOrder.slice(removeStartIndex);\n            this.removeBlocks(removed);\n        }\n    }\n\n    removeBlocks(removed: string[]) {\n        removed.forEach((blkID: string) => {\n            this.removeBlock(blkID);\n        });\n    }\n}\n\nexport default TangleStore;\n","export var dagreOptions = {\n    name: 'dagre',\n    // dagre algo options, uses default value on undefined\n    nodeSep: undefined, // the separation between adjacent nodes in the same rank\n    edgeSep: undefined, // the separation between adjacent edges in the same rank\n    rankSep: undefined, // the separation between each rank in the layout\n    rankDir: 'LR', // 'TB' for top to bottom flow, 'LR' for left to right,\n    ranker: undefined, // Type of algorithm to assign a rank to each node in the input graph. Possible values: 'network-simplex', 'tight-tree' or 'longest-path'\n    minLen: function() {\n        return 1;\n    }, // number of ranks to keep between the source and target of the edge\n    edgeWeight: function() {\n        return 1;\n    }, // higher weight edges are generally made shorter and straighter than lower weight edges\n\n    // general layout options\n    fit: true, // whether to fit to viewport\n    padding: 30, // fit padding\n    spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n    nodeDimensionsIncludeLabels: false, // whether labels should be included in determining the space used by a node\n    animate: false, // whether to transition the node positions\n    animationDuration: 500, // duration of animation in ms if enabled\n    animationEasing: undefined, // easing of animation if enabled\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    transform: function(node, pos) {\n        return pos;\n    }, // a function that applies a transform to the final node position\n    ready: function() {\n        return true;\n    }, // on layoutready\n    stop: function() {\n        return true;\n    } // on layoutstop\n};\n\nexport var conflictDagreOptions = {\n    name: 'dagre',\n    // dagre algo options, uses default value on undefined\n    nodeSep: undefined, // the separation between adjacent nodes in the same rank\n    edgeSep: undefined, // the separation between adjacent edges in the same rank\n    rankSep: 200, // the separation between each rank in the layout\n    rankDir: 'LR', // 'TB' for top to bottom flow, 'LR' for left to right,\n    ranker: undefined, // Type of algorithm to assign a rank to each node in the input graph. Possible values: 'network-simplex', 'tight-tree' or 'longest-path'\n    minLen: function() {\n        return 1;\n    }, // number of ranks to keep between the source and target of the edge\n    edgeWeight: function() {\n        return 1;\n    }, // higher weight edges are generally made shorter and straighter than lower weight edges\n\n    // general layout options\n    fit: true, // whether to fit to viewport\n    padding: 30, // fit padding\n    spacingFactor: undefined, // Applies a multiplicative factor (>0) to expand or compress the overall area that the nodes take up\n    nodeDimensionsIncludeLabels: false, // whether labels should be included in determining the space used by a node\n    animate: false, // whether to transition the node positions\n    animationDuration: 500, // duration of animation in ms if enabled\n    animationEasing: undefined, // easing of animation if enabled\n    boundingBox: undefined, // constrain layout bounds; { x1, y1, x2, y2 } or { x1, y1, w, h }\n    transform: function(node, pos) {\n        return pos;\n    }, // a function that applies a transform to the final node position\n    ready: function() {\n        return true;\n    }, // on layoutready\n    stop: function() {\n        return true;\n    } // on layoutstop\n};\n","export const UTXO = {\n    INPUT_COLOR: '#EF8354',\n    OUTPUT_COLOR: '#B91372',\n    PARENT_COLOR: '#5296A5',\n    COLOR_CONFIRMED: '#F0C808',\n    SELECTED: '#61E294',\n    BORDER_SELECTED: '#B91372',\n    BORDER_COLOR: 'black'\n};\n\nexport const LINE = {\n    COLOR: '#696969',\n    EDGE_STYLE: 'bezier',\n    LAYOUT: 'dagre' // https://js.cytoscape.org/#layouts\n};\n\nexport const BRANCH = {\n    COLOR: '#5296A5',\n    COLOR_CONFIRMED: '#F0C808',\n    STEP: '20px',\n    SELECTED: '#61E294',\n    OPACITY: 1,\n    SEARCHED_COLOR: '#EF8354',\n    MASTER_COLOR: '#A31621',\n    MASTER_LABEL: '#E7DFC6'\n};\n","import {IGraph} from './graph';\nimport cytoscape from 'cytoscape';\nimport {conflictDagreOptions, dagreOptions} from 'styles/graphStyle';\nimport {utxoVertex} from 'models/utxo';\nimport {conflictVertex} from 'models/conflict';\nimport {ObservableMap} from 'mobx';\nimport {BRANCH, LINE, UTXO} from './../styles/cytoscapeStyles';\n\nexport class cytoscapeLib implements IGraph {\n    cy;\n    layout;\n    layoutApi;\n\n    constructor(options: Array<any>, init: () => any) {\n        options.forEach((o) => {\n            cytoscape.use(o);\n        });\n\n        [this.cy, this.layout, this.layoutApi] = init();\n    }\n\n    drawVertex(data: any): void {\n        this.cy.add(data);\n    }\n\n    removeVertex(id: string): void {\n        const children = this.cy.getElementById(id).children();\n\n        this.cy.remove('#' + id);\n        this.cy.remove(children);\n    }\n\n    selectVertex(id: string): void {\n        const node = this.cy.getElementById(id);\n        if (!node) return;\n        node.select();\n    }\n\n    unselectVertex(id: string): void {\n        const node = this.cy.getElementById(id);\n        if (!node) return;\n        node.unselect();\n    }\n\n    centerVertex(id: string): void {\n        const node = this.cy.getElementById(id);\n        if (!node) return;\n        this.cy.center(node);\n    }\n\n    centerGraph(): void {\n        this.cy.center();\n    }\n\n    clearGraph(): void {\n        this.cy.elements().remove();\n    }\n\n    updateLayout(): void {\n        this.cy.layout(this.layout).run();\n    }\n\n    addNodeEventListener(event: string, listener: () => void): void {\n        this.cy.on(event, 'node', listener);\n    }\n}\n\nexport function drawTransaction(\n    tx: utxoVertex,\n    graph: cytoscapeLib,\n    outputMap: Map<any, any>\n) {\n    let collection = graph.cy.collection();\n\n    // draw grouping (tx)\n    collection = collection.union(\n        graph.cy.add({\n            group: 'nodes',\n            data: { id: tx.ID },\n            classes: 'transaction'\n        })\n    );\n\n    // draw inputs\n    const inputNodeID = tx.ID + '_input';\n    let inputLabel = '';\n    if (tx.inputs.length > 1) {\n        inputLabel = tx.inputs.length + ' inputs';\n    }\n    collection = collection.union(\n        graph.cy.add({\n            group: 'nodes',\n            data: {\n                id: inputNodeID,\n                parent: tx.ID,\n                label: inputLabel\n            },\n            classes: ['input', 'center-center']\n        })\n    );\n\n    tx.inputs.forEach((input) => {\n        // link input to the tx that contains unspent output\n        const spentOutputTx = outputMap.get(input.referencedOutputID.base58);\n        if (spentOutputTx) {\n            collection = collection.union(\n                graph.cy.add({\n                    group: 'edges',\n                    data: {\n                        source: spentOutputTx + '_output',\n                        target: inputNodeID\n                    }\n                })\n            );\n        }\n    });\n\n    // draw outputs\n    const outputNodeID = tx.ID + '_output';\n    let outputLabel = '';\n    if (tx.outputs.length > 1) {\n        outputLabel = tx.outputs.length + ' outputs';\n    }\n    collection = collection.union(\n        graph.cy.add({\n            group: 'nodes',\n            data: { id: outputNodeID, parent: tx.ID, label: outputLabel },\n            classes: ['output', 'center-center']\n        })\n    );\n\n    // alignment of inputs and outputs\n    collection = collection.union(\n        graph.cy.add({\n            group: 'edges',\n            data: {\n                source: inputNodeID,\n                target: outputNodeID\n            },\n            classes: 'invisible'\n        })\n    );\n\n    updateConfirmedTransaction(tx, graph);\n    graph.layoutApi.placeNewNodes(collection);\n}\n\nconst drawSingleConflict = function (\n    conflict: conflictVertex,\n    graph: cytoscapeLib,\n    conflictMap: ObservableMap<string, conflictVertex>\n): any {\n    if (!conflict) {\n        return;\n    }\n    let v: any;\n    try {\n        v = graph.cy.add({\n            group: 'nodes',\n            data: { id: conflict.ID }\n        });\n    } catch (e) {\n        // already drawn\n    }\n    conflictMap.set(conflict.ID, conflict);\n    updateConfirmedConflict(conflict, graph);\n\n    if (v) {\n        graph.layoutApi.placeNewNodes(v);\n        if (conflict.isConfirmed) {\n            v.addClass('confirmed');\n        }\n    }\n\n    return v;\n};\n\nexport async function drawConflict(\n    conflict: conflictVertex,\n    graph: cytoscapeLib,\n    conflictMap: ObservableMap<string, conflictVertex>\n) {\n    if (!conflict) {\n        return;\n    }\n    drawSingleConflict(conflict, graph, conflictMap);\n    conflict.parents = conflict.parents || [];\n    for (let i = 0; i < conflict.parents.length; i++) {\n        const pID = conflict.parents[i];\n        const b = conflictMap.get(pID);\n        if (b) {\n            graph.cy.add({\n                group: 'edges',\n                data: { source: pID, target: conflict.ID }\n            });\n        } else {\n            const res = await fetch(`/api/dagsvisualizer/conflict/${pID}`);\n            const conflicts: Array<conflictVertex> =\n                (await res.json()) as Array<conflictVertex>;\n            drawConflictsUpToMaster(conflicts, graph, conflictMap);\n            graph.cy.add({\n                group: 'edges',\n                data: { source: pID, target: conflict.ID }\n            });\n        }\n    }\n}\n\nfunction drawConflictsUpToMaster(\n    conflicts: Array<conflictVertex>,\n    graph: cytoscapeLib,\n    conflictMap: ObservableMap<string, conflictVertex>\n) {\n    for (let i = 0; i < conflicts.length; i++) {\n        const conflict = conflicts[i];\n        drawSingleConflict(conflict, graph, conflictMap);\n        conflict.parents?.forEach((parentID) => {\n            const parent = conflicts.find((b) => b.ID === parentID);\n            if (parent) {\n                if (!conflictMap.get(parentID)) {\n                    drawSingleConflict(parent, graph, conflictMap);\n                }\n                graph.cy.add({\n                    group: 'edges',\n                    data: { source: parent.ID, target: conflict.ID }\n                });\n            }\n        });\n    }\n}\n\nexport function updateConfirmedTransaction(\n    tx: utxoVertex,\n    graph: cytoscapeLib\n) {\n    if (!tx) return;\n\n    const node = graph.cy.getElementById(tx.ID);\n    if (!node) return;\n    if (tx.isConfirmed) {\n        node.addClass('confirmed');\n    } else if (node.hasClass('confirmed')) {\n        node.removeClass('confirmed');\n    }\n}\n\nexport function updateConfirmedConflict(\n    conflict: conflictVertex,\n    graph: cytoscapeLib\n): void {\n    if (!conflict)  return;\n\n    const node = graph.cy.getElementById(conflict.ID);\n    if (!node) return;\n    if (conflict.isConfirmed) {\n        node.addClass('confirmed');\n    } else if (node.hasClass('confirmed')) {\n        node.removeClass('confirmed');\n    }\n}\n\nexport function removeConfirmationStyle(id: string, graph: cytoscapeLib): void {\n    const node = graph.cy.getElementById(id);\n    if (!node) return;\n    node.removeClass('confirmed');\n}\n\nexport function initUTXODAG() {\n    const cy = cytoscape({\n        container: document.getElementById('utxoVisualizer'), // container to render in\n        style: [\n            // the stylesheet for the graph\n            {\n                selector: 'node',\n                style: {\n                    'font-weight': 'bold',\n                    shape: 'rectangle',\n                    width: 20,\n                    height: 20\n                }\n            },\n            {\n                selector: 'edge',\n                style: {\n                    width: 1,\n                    'curve-style': LINE.EDGE_STYLE,\n                    'line-color': LINE.COLOR,\n                    'control-point-step-size': '10px',\n                    events: 'no'\n                }\n            },\n            {\n                selector: ':parent',\n                style: {\n                    'background-color': UTXO.PARENT_COLOR,\n                    'min-width': '50px',\n                    'min-height': '50px',\n                    'border-color': UTXO.BORDER_COLOR\n                }\n            },\n            {\n                selector: 'node:selected',\n                style: {\n                    'background-color': UTXO.SELECTED,\n                    'border-color': UTXO.BORDER_SELECTED\n                }\n            },\n            {\n                selector: '.input',\n                style: {\n                    'background-color': UTXO.INPUT_COLOR,\n                    'font-size': 16,\n                    'padding-bottom': '2px',\n                    label: 'data(label)',\n                    events: 'no'\n                }\n            },\n            {\n                selector: '.output',\n                style: {\n                    'background-color': UTXO.OUTPUT_COLOR,\n                    'font-size': 16,\n                    label: 'data(label)',\n                    events: 'no'\n                }\n            },\n            {\n                selector: '.confirmed',\n                style: {\n                    'background-color': UTXO.COLOR_CONFIRMED,\n                }\n            },\n            {\n                selector: '.invisible',\n                style: {\n                    visibility: 'hidden'\n                }\n            }\n        ],\n        layout: {\n            name: LINE.LAYOUT\n        }\n    });\n    const layout = dagreOptions;\n    const layoutApi = cy.layoutUtilities({\n        desiredAspectRatio: 1,\n        polyominoGridSizeFactor: 1,\n        utilityFunction: 0,\n        componentSpacing: 80\n    });\n\n    return [cy, layout, layoutApi];\n}\n\nexport function initConflictDAG() {\n    const cy = cytoscape({\n        container: document.getElementById('conflictVisualizer'), // container to render in\n        style: [\n            // the stylesheet for the graph\n            {\n                selector: 'node',\n                style: {\n                    'background-color': BRANCH.COLOR,\n                    shape: 'rectangle',\n                    width: 25,\n                    height: 15\n                }\n            },\n            {\n                selector: 'edge',\n                style: {\n                    width: 1,\n                    'curve-style': LINE.EDGE_STYLE,\n                    'line-color': LINE.COLOR,\n                    'control-point-step-size': BRANCH.STEP,\n                    events: 'no'\n                }\n            },\n            {\n                selector: 'node:selected',\n                style: {\n                    'background-opacity': BRANCH.OPACITY,\n                    'background-color': BRANCH.SELECTED\n                }\n            },\n            {\n                selector: '.search',\n                style: {}\n            },\n            {\n                selector: '.search:selected',\n                style: {\n                    'background-color': BRANCH.SELECTED\n                }\n            },\n            {\n                selector: '.confirmed',\n                style: {\n                    'background-color': BRANCH.COLOR_CONFIRMED\n                }\n            }\n        ],\n        layout: {\n            name: LINE.LAYOUT\n        }\n    });\n    const layout = conflictDagreOptions;\n    const layoutApi = cy.layoutUtilities({\n        desiredAspectRatio: 1,\n        polyominoGridSizeFactor: 1,\n        utilityFunction: 0,\n        componentSpacing: 200\n    });\n\n    return [cy, layout, layoutApi];\n}\n","import { action, makeObservable, observable, ObservableMap } from 'mobx';\nimport { registerHandler, unregisterHandler, WSBlkType } from 'utils/WS';\nimport { MAX_VERTICES } from 'utils/constants';\nimport dagre from 'cytoscape-dagre';\nimport layoutUtilities from 'cytoscape-layout-utilities';\nimport 'styles/style.css';\nimport {\n    cytoscapeLib,\n    drawTransaction,\n    initUTXODAG,\n    removeConfirmationStyle,\n    updateConfirmedTransaction\n} from 'graph/cytoscape';\nimport { utxoBooked, utxoConfirmationStateChanged, utxoVertex } from 'models/utxo';\n\nexport class UTXOStore {\n    @observable maxUTXOVertices = MAX_VERTICES;\n    @observable transactions = new ObservableMap<string, utxoVertex>();\n    @observable foundTxs = new ObservableMap<string, utxoVertex>();\n    @observable selectedTx: utxoVertex = null;\n    @observable paused = false;\n    @observable search = '';\n    foundOutputMap = new Map();\n    outputMap = new Map();\n    txOrder: Array<any> = [];\n    highlightedTxs = [];\n    draw = true;\n\n    vertexChanges = 0;\n    txToRemoveAfterResume = [];\n    txToAddAfterResume = [];\n\n    layoutUpdateTimerID;\n\n    graph;\n\n    constructor() {\n        makeObservable(this);\n        registerHandler(WSBlkType.Transaction, this.addTransaction);\n        registerHandler(WSBlkType.TransactionBooked, this.setTxConflict);\n        registerHandler(\n            WSBlkType.TransactionConfirmationStateChanged,\n            this.transactionConfirmationStateChanged\n        );\n    }\n\n    unregisterHandlers() {\n        unregisterHandler(WSBlkType.Transaction);\n        unregisterHandler(WSBlkType.TransactionBooked);\n        unregisterHandler(WSBlkType.TransactionConfirmationStateChanged);\n    }\n\n    @action\n    addTransaction = (tx: utxoVertex) => {\n        this.checkLimit();\n\n        this.txOrder.push(tx.ID);\n        this.transactions.set(tx.ID, tx);\n        tx.outputs.forEach((outputID) => {\n            this.outputMap.set(outputID, tx.ID);\n        });\n\n        if (this.paused) {\n            this.txToAddAfterResume.push(tx.ID);\n            return;\n        }\n        if (this.draw) {\n            this.drawVertex(tx);\n        }\n    };\n\n    checkLimit = () => {\n        if (this.txOrder.length >= this.maxUTXOVertices) {\n            const removed = this.txOrder.shift();\n            const txObj = this.transactions.get(removed);\n            txObj.outputs.forEach((output) => {\n                this.outputMap.delete(output);\n            });\n            this.transactions.delete(removed);\n\n            if (this.paused) {\n                // keep the removed tx that should be removed from the graph after resume.\n                this.txToRemoveAfterResume.push(removed);\n            } else {\n                this.removeVertex(removed);\n            }\n        }\n    };\n\n    @action\n    addFoundTx = (tx: utxoVertex) => {\n        this.foundTxs.set(tx.ID, tx);\n        tx.outputs.forEach((outputID) => {\n            this.foundOutputMap.set(outputID, tx.ID);\n        });\n    };\n\n    @action\n    clearFoundTxs = () => {\n        this.foundTxs.clear();\n        this.foundOutputMap.clear();\n    };\n\n    @action\n    setTxConflict = (bookedTx: utxoBooked) => {\n        const tx = this.transactions.get(bookedTx.ID);\n        if (!tx) {\n            return;\n        }\n\n        tx.conflictID = bookedTx.conflictID;\n        this.transactions.set(bookedTx.ID, tx);\n    };\n\n    @action transactionConfirmationStateChanged = (txConfirmationState: utxoConfirmationStateChanged) => {\n        this.setTXConfirmationStateTime(txConfirmationState);\n        this.updateUTXO(txConfirmationState);\n    };\n\n    @action\n    setTXConfirmationStateTime = (txConfirmationState: utxoConfirmationStateChanged) => {\n        const tx = this.transactions.get(txConfirmationState.ID);\n        if (!tx) {\n            return;\n        }\n\n        if (txConfirmationState.isConfirmed) {\n            tx.isConfirmed = true;\n        } else {\n            tx.isConfirmed = false;\n        }\n\n        tx.confirmationStateTime = txConfirmationState.confirmationStateTime;\n        tx.confirmationState = txConfirmationState.confirmationState;\n        this.transactions.set(txConfirmationState.ID, tx);\n    };\n\n    @action\n    updateSelected = (txID: string) => {\n        const tx = this.transactions.get(txID) || this.foundTxs.get(txID);\n        if (!tx) return;\n        this.selectedTx = tx;\n        removeConfirmationStyle(txID, this.graph);\n    };\n\n    @action\n    clearSelected = (removePreSelectedNode?: boolean) => {\n        // unselect preselected node manually\n        if (removePreSelectedNode && this.selectedTx) {\n            this.graph.unselectVertex(this.selectedTx.ID);\n        }\n        if (this.selectedTx) {\n            updateConfirmedTransaction(this.selectedTx, this.graph);\n        }\n        this.selectedTx = null;\n    };\n\n    @action\n    pauseResume = () => {\n        if (this.paused) {\n            this.resumeAndSyncGraph();\n            this.paused = false;\n            return;\n        }\n        this.paused = true;\n    };\n\n    @action\n    updateVerticesLimit = (num: number) => {\n        this.maxUTXOVertices = num;\n        this.trimTxToVerticesLimit();\n    };\n\n    @action\n    updateSearch = (search: string) => {\n        this.search = search.trim();\n    };\n\n    @action\n    searchAndSelect = () => {\n        if (!this.search) return;\n\n        this.selectTx(this.search);\n        this.centerTx(this.search);\n    };\n\n    selectTx = (txID: string) => {\n        // clear pre-selected node first.\n        this.clearSelected(true);\n        this.graph.selectVertex(txID);\n        this.updateSelected(txID);\n    };\n\n    getTxsFromConflict = (conflictID: string, searchMode: boolean) => {\n        const txs = [];\n\n        if (searchMode) {\n            this.foundTxs.forEach((tx: utxoVertex) => {\n                if (tx.conflictID === conflictID) {\n                    txs.push(tx.ID);\n                }\n            });\n\n            return txs;\n        }\n\n        this.transactions.forEach((tx: utxoVertex) => {\n            if (tx.conflictID === conflictID) {\n                txs.push(tx.ID);\n            }\n        });\n\n        return txs;\n    };\n\n    resumeAndSyncGraph = () => {\n        // add buffered tx\n        this.txToAddAfterResume.forEach((txID) => {\n            const tx = this.transactions.get(txID);\n            if (tx) {\n                this.drawVertex(tx);\n            }\n        });\n        this.txToAddAfterResume = [];\n\n        // remove removed tx\n        this.txToRemoveAfterResume.forEach((txID) => {\n            this.removeVertex(txID);\n        });\n        this.txToRemoveAfterResume = [];\n    };\n\n    drawExistedTxs = () => {\n        this.transactions.forEach((tx) => {\n            this.drawVertex(tx);\n        });\n    };\n\n    updateDrawStatus = (draw: boolean) => {\n        this.draw = draw;\n    };\n\n    drawFoundVertex = (tx: utxoVertex) => {\n        drawTransaction(tx, this.graph, this.foundOutputMap);\n        this.vertexChanges++;\n    };\n\n    drawVertex = (tx: utxoVertex) => {\n        drawTransaction(tx, this.graph, this.outputMap);\n        updateConfirmedTransaction(tx, this.graph);\n        this.vertexChanges++;\n    };\n\n    removeVertex = (txID: string) => {\n        this.graph.removeVertex(txID);\n        this.vertexChanges++;\n    };\n\n    highlightTxs = (txIDs: string[]) => {\n        this.clearHighlightedTxs();\n\n        // update highlighted txs\n        this.highlightedTxs = txIDs;\n        txIDs.forEach((id) => {\n            this.graph.selectVertex(id);\n        });\n    };\n\n    clearHighlightedTxs = () => {\n        this.highlightedTxs.forEach((id) => {\n            this.graph.unselectVertex(id);\n        });\n    };\n\n    centerTx = (txID: string) => {\n        this.graph.centerVertex(txID);\n    };\n\n    centerEntireGraph = () => {\n        this.graph.centerGraph();\n    };\n\n    clearGraph = () => {\n        this.graph.clearGraph();\n    };\n\n    updateLayoutTimer = () => {\n        this.layoutUpdateTimerID = setInterval(() => {\n            if (this.vertexChanges > 0 && !this.paused) {\n                this.graph.updateLayout();\n                this.vertexChanges = 0;\n            }\n        }, 10000);\n    };\n\n    trimTxToVerticesLimit() {\n        if (this.txOrder.length >= this.maxUTXOVertices) {\n            const removeStartIndex = this.txOrder.length - this.maxUTXOVertices;\n            const removed = this.txOrder.slice(0, removeStartIndex);\n            this.txOrder = this.txOrder.slice(removeStartIndex);\n            this.removeTxs(removed);\n        }\n    }\n\n    removeTxs(removed: string[]) {\n        removed.forEach((id: string) => {\n            const t = this.transactions.get(id);\n            if (t) {\n                this.removeVertex(id);\n                t.outputs.forEach((output) => {\n                    this.outputMap.delete(output);\n                });\n                this.transactions.delete(id);\n            }\n        });\n    }\n\n    updateUTXO(utxoConfirmationState: utxoConfirmationStateChanged) {\n        const tx = this.transactions.get(utxoConfirmationState.ID);\n        if (tx) {\n            updateConfirmedTransaction(tx, this.graph);\n        }\n    }\n\n    start = () => {\n        this.graph = new cytoscapeLib([dagre, layoutUtilities], initUTXODAG);\n\n        // set up click event\n        this.graph.addNodeEventListener('select', (evt) => {\n            const node = evt.target;\n            const nodeData = node.json();\n\n            this.updateSelected(nodeData.data.id);\n        });\n\n        // clear selected node\n        this.graph.addNodeEventListener('unselect', () => {\n            this.clearSelected();\n        });\n\n        this.updateLayoutTimer();\n    };\n\n    stop = () => {\n        this.unregisterHandlers();\n\n        // stop updating layout.\n        clearInterval(this.layoutUpdateTimerID);\n    };\n}\n\nexport default UTXOStore;\n","import {action, makeObservable, observable, ObservableMap} from 'mobx';\nimport {registerHandler, unregisterHandler, WSBlkType} from 'utils/WS';\nimport {MAX_VERTICES} from 'utils/constants';\nimport dagre from 'cytoscape-dagre';\nimport layoutUtilities from 'cytoscape-layout-utilities';\nimport {\n    cytoscapeLib,\n    drawConflict,\n    initConflictDAG,\n    removeConfirmationStyle,\n    updateConfirmedConflict\n} from 'graph/cytoscape';\nimport {\n    conflictConfirmationStateChanged,\n    conflictParentUpdate,\n    conflictVertex,\n    conflictWeightChanged\n} from 'models/conflict';\nimport { BRANCH } from '../styles/cytoscapeStyles';\n\nexport class ConflictStore {\n    @observable maxConflictVertices = MAX_VERTICES;\n    @observable conflicts = new ObservableMap<string, conflictVertex>();\n    @observable foundConflicts = new ObservableMap<string, conflictVertex>();\n    conflictsBeforeSearching: Map<string, conflictVertex>;\n    @observable selectedConflict: conflictVertex = null;\n    @observable paused = false;\n    @observable search = '';\n    conflictOrder: Array<any> = [];\n    highlightedConflicts = [];\n    draw = true;\n\n    vertexChanges = 0;\n    conflictToRemoveAfterResume = [];\n    conflictToAddAfterResume = [];\n\n    layoutUpdateTimerID;\n    graph;\n\n    constructor() {\n        makeObservable(this);\n        registerHandler(WSBlkType.Conflict, this.addConflict);\n        registerHandler(WSBlkType.ConflictParentsUpdate, this.updateParents);\n        registerHandler(WSBlkType.ConflictConfirmationStateChanged, this.conflictConfirmationStateChanged);\n        registerHandler(\n            WSBlkType.ConflictWeightChanged,\n            this.conflictWeightChanged\n        );\n    }\n\n    unregisterHandlers() {\n        unregisterHandler(WSBlkType.Conflict);\n        unregisterHandler(WSBlkType.ConflictParentsUpdate);\n        unregisterHandler(WSBlkType.ConflictConfirmationStateChanged);\n        unregisterHandler(WSBlkType.ConflictWeightChanged);\n    }\n\n    @action\n    addConflict = (conflict: conflictVertex) => {\n        this.checkLimit();\n        this.conflictOrder.push(conflict.ID);\n\n        if (this.paused) {\n            this.conflictToAddAfterResume.push(conflict.ID);\n        }\n        if (this.draw) {\n            this.drawVertex(conflict);\n        }\n    };\n\n    checkLimit = () => {\n        if (this.conflictOrder.length >= this.maxConflictVertices) {\n            const removed = this.conflictOrder.shift();\n            if (this.paused) {\n                // keep the removed tx that should be removed from the graph after resume.\n                this.conflictToRemoveAfterResume.push(removed);\n            } else {\n                this.removeVertex(removed);\n            }\n        }\n    };\n\n    @action\n    addFoundConflict = (conflict: conflictVertex) => {\n        this.foundConflicts.set(conflict.ID, conflict);\n    };\n\n    @action\n    clearFoundConflicts = () => {\n        this.foundConflicts.clear();\n    };\n\n    @action\n    updateParents = (newParents: conflictParentUpdate) => {\n        const b = this.conflicts.get(newParents.ID);\n        if (!b) {\n            return;\n        }\n\n        b.parents = newParents.parents;\n        // draw new links\n        this.drawVertex(b);\n    };\n\n    @action\n    conflictConfirmationStateChanged = (conflict: conflictConfirmationStateChanged) => {\n        const b = this.conflicts.get(conflict.ID);\n        if (!b) {\n            return;\n        }\n\n        if (conflict.isConfirmed) {\n            b.isConfirmed = true;\n        } else {\n            b.isConfirmed = false;\n        }\n\n        b.confirmationState = conflict.confirmationState;\n        this.conflicts.set(conflict.ID, b);\n        updateConfirmedConflict(b, this.graph);\n    };\n\n    @action\n    conflictWeightChanged = (conflict: conflictWeightChanged) => {\n        const b = this.conflicts.get(conflict.ID);\n        if (!b) {\n            return;\n        }\n        b.aw = conflict.weight;\n        b.confirmationState = conflict.confirmationState;\n        this.conflicts.set(conflict.ID, b);\n    };\n\n    @action\n    updateSelected = (conflictID: string) => {\n        const b =\n            this.conflicts.get(conflictID) || this.foundConflicts.get(conflictID);\n        if (!b) return;\n        this.selectedConflict = b;\n        removeConfirmationStyle(b.ID, this.graph);\n    };\n\n    @action\n    clearSelected = (removePreSelectedNode?: boolean) => {\n        // unselect preselected node manually\n        if (removePreSelectedNode && this.selectedConflict) {\n            this.graph.unselectVertex(this.selectedConflict.ID);\n        }\n        updateConfirmedConflict(this.selectedConflict, this.graph);\n        this.selectedConflict = null;\n    };\n\n    @action\n    pauseResume = () => {\n        if (this.paused) {\n            this.resumeAndSyncGraph();\n            this.paused = false;\n            return;\n        }\n        this.paused = true;\n    };\n\n    @action\n    updateVerticesLimit = (num: number) => {\n        this.maxConflictVertices = num;\n        this.trimConflictToVerticesLimit();\n    };\n\n    @action\n    updateSearch = (search: string) => {\n        this.search = search.trim();\n    };\n\n    @action\n    searchAndHighlight = () => {\n        if (!this.search) return;\n\n        this.selectConflict(this.search);\n        this.centerConflict(this.search);\n    };\n\n    getConflictVertex = (conflictID: string) => {\n        return this.conflicts.get(conflictID) || this.foundConflicts.get(conflictID);\n    };\n\n    drawExistedConflicts = () => {\n        for (const conflict of this.conflictsBeforeSearching.values()) {\n            this.drawVertex(conflict);\n        }\n        this.resumeAndSyncGraph();\n        this.conflictsBeforeSearching = undefined;\n    };\n\n    updateDrawStatus = (draw: boolean) => {\n        this.draw = draw;\n    };\n\n    resumeAndSyncGraph = () => {\n        // add buffered tx\n        this.conflictToAddAfterResume.forEach((conflictID) => {\n            const b = this.conflicts.get(conflictID);\n            if (b) {\n                this.drawVertex(b);\n            }\n        });\n        this.conflictToAddAfterResume = [];\n\n        // remove removed tx\n        this.conflictToRemoveAfterResume.forEach((conflictID) => {\n            this.removeVertex(conflictID);\n        });\n        this.conflictToRemoveAfterResume = [];\n    };\n\n    drawVertex = async (conflict: conflictVertex) => {\n        this.vertexChanges++;\n        await drawConflict(conflict, this.graph, this.conflicts);\n        updateConfirmedConflict(conflict, this.graph);\n    };\n\n    removeVertex = (conflictID: string) => {\n        this.vertexChanges++;\n        this.graph.removeVertex(conflictID);\n        this.conflicts.delete(conflictID);\n    };\n\n    highlightConflicts = (conflictIDs: string[]) => {\n        this.clearHighlightedConflicts();\n\n        // update highlighted conflicts\n        this.highlightedConflicts = conflictIDs;\n        conflictIDs.forEach((id) => {\n            this.graph.selectVertex(id);\n        });\n    };\n\n    clearHighlightedConflicts = () => {\n        this.highlightedConflicts.forEach((id) => {\n            this.graph.unselectVertex(id);\n        });\n    };\n\n    selectConflict = (conflictID: string) => {\n        // clear pre-selected conflict.\n        this.clearSelected(true);\n        this.graph.selectVertex(conflictID);\n        this.updateSelected(conflictID);\n        removeConfirmationStyle(this.selectedConflict.ID, this.graph);\n    };\n\n    centerConflict = (conflictID: string) => {\n        this.graph.centerVertex(conflictID);\n    };\n\n    centerEntireGraph = () => {\n        this.graph.centerGraph();\n    };\n\n    clearGraph = () => {\n        this.graph.clearGraph();\n        if (!this.conflictsBeforeSearching) {\n            this.conflictsBeforeSearching = new Map<string, conflictVertex>();\n            this.conflicts.forEach((conflict, conflictID) => {\n                this.conflictsBeforeSearching.set(conflictID, conflict);\n            });\n        }\n        this.conflicts.clear();\n        this.addMasterConflict();\n    };\n\n    updateLayoutTimer = () => {\n        this.layoutUpdateTimerID = setInterval(() => {\n            if (this.vertexChanges > 0 && !this.paused) {\n                this.graph.updateLayout();\n                this.vertexChanges = 0;\n            }\n        }, 10000);\n    };\n\n    trimConflictToVerticesLimit() {\n        if (this.conflictOrder.length >= this.maxConflictVertices) {\n            const removeStartIndex =\n                this.conflictOrder.length - this.maxConflictVertices;\n            const removed = this.conflictOrder.slice(0, removeStartIndex);\n            this.conflictOrder = this.conflictOrder.slice(removeStartIndex);\n            this.removeConflicts(removed);\n        }\n    }\n\n    removeConflicts(removed: string[]) {\n        removed.forEach((id: string) => {\n            const b = this.conflicts.get(id);\n            if (b) {\n                this.removeVertex(id);\n                this.conflicts.delete(id);\n            }\n        });\n    }\n\n    addMasterConflict = (): conflictVertex => {\n        const master: conflictVertex = {\n            ID: '4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM',\n            parents: [],\n            isConfirmed: true,\n            conflicts: null,\n            confirmationState: 'Confirmed',\n            aw: 0\n        };\n        this.conflicts.set(\n            '4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM',\n            master\n        );\n        this.graph.drawVertex({\n            data: {\n                id: '4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM',\n                label: 'master'\n            },\n            style: {\n                'background-color': BRANCH.MASTER_COLOR,\n                label: 'master',\n                color: BRANCH.MASTER_LABEL\n            }\n        });\n        return master;\n    };\n\n    start = () => {\n        this.graph = new cytoscapeLib([dagre, layoutUtilities], initConflictDAG);\n\n        // add master conflict\n        const master = this.addMasterConflict();\n        this.graph.centerVertex(master.ID);\n\n        // set up click event.\n        this.graph.addNodeEventListener('select', (evt) => {\n            const node = evt.target;\n            const nodeData = node.json();\n\n            this.updateSelected(nodeData.data.id);\n        });\n\n        // clear selected node.\n        this.graph.addNodeEventListener('unselect', () => {\n            this.clearSelected();\n        });\n\n        // update layout every 10 seconds if needed.\n        this.updateLayoutTimer();\n    };\n\n    stop = () => {\n        this.unregisterHandlers();\n\n        // stop updating layout.\n        clearInterval(this.layoutUpdateTimerID);\n    };\n}\n\nexport default ConflictStore;\n","import {action, makeObservable, observable} from 'mobx';\nimport moment, {Moment} from 'moment';\nimport TangleStore from './TangleStore';\nimport {tangleVertex} from 'models/tangle';\nimport UTXOStore from './UTXOStore';\nimport {utxoVertex} from 'models/utxo';\nimport ConflictStore from './ConflictStore';\nimport {conflictVertex} from 'models/conflict';\nimport {DEFAULT_DASHBOARD_URL} from 'utils/constants';\n\nexport class searchResult {\n    blocks: Array<tangleVertex>;\n    txs: Array<utxoVertex>;\n    conflicts: Array<conflictVertex>;\n    error: string;\n}\n\nexport class GlobalStore {\n    @observable searchStartingTime = moment().unix();\n    @observable searchEndingTime = moment().unix();\n    @observable explorerAddress = DEFAULT_DASHBOARD_URL;\n    @observable searchResponse = '';\n    @observable previewResponseSize = '';\n    @observable manualPicker = [false, false];\n    searchResult: searchResult = undefined;\n    searchMode = false;\n\n    tangleStore: TangleStore;\n    utxoStore: UTXOStore;\n    conflictStore: ConflictStore;\n\n    constructor(\n        tangleStore: TangleStore,\n        utxoStore: UTXOStore,\n        conflictStore: ConflictStore\n    ) {\n        makeObservable(this);\n\n        this.tangleStore = tangleStore;\n        this.utxoStore = utxoStore;\n        this.conflictStore = conflictStore;\n    }\n\n    @action\n    updateStartManualPicker = (b: boolean) => {\n        this.manualPicker[0] = b;\n    };\n\n    @action\n    updateEndManualPicker = (b: boolean) => {\n        this.manualPicker[1] = b;\n    };\n\n    syncWithBlk = () => {\n        const blk = this.tangleStore.selectedBlk;\n        if (!blk) return;\n\n        this.utxoStore.clearSelected(true);\n        this.utxoStore.clearHighlightedTxs();\n        this.conflictStore.clearSelected(true);\n        this.conflictStore.clearHighlightedConflicts();\n\n        if (blk.isTx) {\n            this.utxoStore.selectTx(blk.txID);\n            this.utxoStore.centerTx(blk.txID);\n        }\n        this.conflictStore.highlightConflicts(blk.conflictIDs);\n    };\n\n    syncWithTx = () => {\n        const tx = this.utxoStore.selectedTx;\n        if (!tx) return;\n\n        // clear previous highlight and selected\n        this.tangleStore.clearSelected();\n        this.tangleStore.clearHighlightedBlks();\n        this.conflictStore.clearSelected(true);\n\n        const blk = this.tangleStore.getTangleVertex(tx.blkID);\n        if (blk) {\n            this.tangleStore.selectBlk(tx.blkID);\n            this.tangleStore.centerBlk(tx.blkID);\n        }\n\n        const conflict = this.conflictStore.getConflictVertex(tx.conflictID);\n        if (conflict) {\n            this.conflictStore.selectConflict(tx.conflictID);\n            this.conflictStore.centerConflict(tx.conflictID);\n        }\n    };\n\n    syncWithConflict = () => {\n        const conflict = this.conflictStore.selectedConflict;\n        if (!conflict) return;\n\n        // iterate blocks to highlight all blocks lies in that conflict\n        const blks = this.tangleStore.getBlksFromConflict(\n            conflict.ID,\n            this.searchMode\n        );\n        this.tangleStore.clearSelected();\n        this.tangleStore.clearHighlightedBlks();\n        this.tangleStore.highlightBlks(blks);\n\n        const txs = this.utxoStore.getTxsFromConflict(conflict.ID, this.searchMode);\n        this.utxoStore.clearSelected(true);\n        this.utxoStore.clearHighlightedTxs();\n        this.utxoStore.highlightTxs(txs);\n    };\n\n    clearSync = () => {\n        this.tangleStore.clearSelected();\n        this.tangleStore.clearHighlightedBlks();\n        this.utxoStore.clearSelected(true);\n        this.utxoStore.clearHighlightedTxs();\n        this.conflictStore.clearSelected(true);\n    };\n\n    get SearchStartingTime() {\n        return moment(this.searchStartingTime);\n    }\n\n    get SearchEndingTime() {\n        return moment(this.searchStartingTime);\n    }\n\n    @action\n    updateExplorerAddress = (addr: string) => {\n        this.explorerAddress = addr;\n    };\n\n    @action\n    updateSearchStartingTime = (dateTime: Moment) => {\n        this.searchStartingTime = dateTime.unix();\n    };\n\n    @action\n    updateSearchEndingTime = (dateTime: Moment) => {\n        this.searchEndingTime = dateTime.unix();\n    };\n\n    @action\n    updateSearchResponse = (e: string) => {\n        this.searchResponse = e;\n    };\n\n    @action\n    updatePreviewSearchResponse = (blk: string) => {\n        this.previewResponseSize = blk;\n    };\n\n    updateSearchResults = (results: searchResult) => {\n        this.searchResult = results;\n    };\n\n    @action\n    updatePreviewResponseSize = (response: searchResult) => {\n        const numOfConflicts = !response.conflicts ? 0 : response.conflicts.length;\n        const numOfBlocks = !response.blocks ? 0 : response.blocks.length;\n        const numOfTransactions = !response.txs ? 0 : response.txs.length;\n        this.updatePreviewSearchResponse(`Found: blocks: ${numOfBlocks};\n            transactions: ${numOfTransactions};\n            conflicts: ${numOfConflicts};`);\n    };\n\n    @action\n    searchAndDrawResults = async () => {\n        try {\n            const res = await fetch(\n                `/api/dagsvisualizer/search/${this.searchStartingTime}/${this.searchEndingTime}`\n            );\n            const result: searchResult = await res.json();\n            if (res.status !== 200) {\n                this.updateSearchResponse(result.error);\n                return;\n            } else {\n                this.updateSearchResponse('To show the results click \"Render\"');\n                this.updatePreviewResponseSize(result);\n            }\n\n            if ((!result.blocks ? 0 : result.blocks.length) === 0) {\n                this.updateSearchResponse('no blocks found!');\n                return;\n            }\n            this.updateSearchResults(result);\n        } catch (err) {\n            console.log(\n                'Fail to fetch blocks/txs/conflicts with the given interval',\n                err\n            );\n        }\n        return;\n    };\n\n    @action\n    renderSearchResults = async () => {\n        if (!this.searchResult) {\n            return;\n        }\n        this.searchMode = true;\n        this.stopDrawNewVertices();\n        this.clearGraphs();\n\n        (this.searchResult.blocks || []).forEach((blk) => {\n            this.tangleStore.addFoundBlk(blk);\n            this.tangleStore.drawVertex(blk);\n        });\n\n        (this.searchResult.txs || []).forEach((tx) => {\n            this.utxoStore.addFoundTx(tx);\n            this.utxoStore.drawFoundVertex(tx);\n        });\n\n        const conflicts = this.searchResult.conflicts || [];\n        for (let i = 0; i < conflicts.length; i++) {\n            this.conflictStore.addFoundConflict(conflicts[i]);\n            await this.conflictStore.drawVertex(conflicts[i]);\n            this.conflictStore.graph.cy\n                .getElementById(conflicts[i].ID)\n                .addClass('search');\n        }\n\n        this.searchResult = undefined;\n        this.updateSearchResponse('');\n\n        return;\n    };\n\n    @action\n    clearSearchAndResume = () => {\n        this.searchMode = false;\n        this.clearFoundVertices();\n        this.clearGraphs();\n        this.clearSelectedVertices();\n\n        // re-draw all existed latest vertices.\n        this.tangleStore.drawExistedBlks();\n        this.utxoStore.drawExistedTxs();\n        this.conflictStore.drawExistedConflicts();\n\n        this.drawNewVertices();\n        this.updateSearchResponse('');\n        this.updatePreviewSearchResponse('');\n    };\n\n    drawNewVertices() {\n        // resume need redraw all existed vertices\n        this.tangleStore.updateDrawStatus(true);\n        this.utxoStore.updateDrawStatus(true);\n        this.conflictStore.updateDrawStatus(true);\n    }\n\n    stopDrawNewVertices() {\n        this.tangleStore.updateDrawStatus(false);\n        this.utxoStore.updateDrawStatus(false);\n        this.conflictStore.updateDrawStatus(false);\n    }\n\n    clearSelectedVertices() {\n        this.tangleStore.clearSelected();\n        this.utxoStore.clearSelected();\n        this.conflictStore.clearSelected();\n    }\n\n    clearGraphs() {\n        this.tangleStore.clearGraph();\n        this.conflictStore.clearGraph();\n        this.utxoStore.clearGraph();\n    }\n\n    clearFoundVertices() {\n        this.tangleStore.clearFoundBlks();\n        this.utxoStore.clearFoundTxs();\n        this.conflictStore.clearFoundConflicts();\n    }\n}\n\nexport default GlobalStore;\n","export function resolveBase58ConflictID(base58Conflict: string): string {\n    switch (base58Conflict) {\n    case MasterConflictInBase58:\n        return 'MasterConflictID';\n    case UndefinedConflictInBase58:\n        return 'UndefinedConflictID';\n    case LazyBookedConflictsConflictInBase58:\n        return 'LazyBookedConflictsConflictID';\n    case InvalidConflictInBase58:\n        return 'InvalidConflictID';\n    default:\n        // otherwise it is a \"regular\" conflictID that doesn't have a distinct name\n        return base58Conflict;\n    }\n}\n\n// base58 conflictIDs that have distinct names\nconst MasterConflictInBase58 = '4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM';\nconst UndefinedConflictInBase58 = '11111111111111111111111111111111';\nconst LazyBookedConflictsConflictInBase58 =\n    'JEKNVnkbo3jma5nREBBJCDoXFVeKkD56V3xKrvRmWxFF';\nconst InvalidConflictInBase58 = 'JEKNVnkbo3jma5nREBBJCDoXFVeKkD56V3xKrvRmWxFG';\n","import * as React from 'react';\nimport { inject, observer } from 'mobx-react';\nimport GlobalStore from 'stores/GlobalStore';\n\ninterface Props {\n    globalStore?: GlobalStore;\n    route: string;\n    title: string;\n}\n\n@inject('globalStore')\n@observer\nexport default class LinkToDashboard extends React.Component<Props, any> {\n    render() {\n        const { route, title } = this.props;\n        const { explorerAddress } = this.props.globalStore;\n\n        return (\n            <a\n                href={`${explorerAddress}/${route}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n            >\n                {title}\n            </a>\n        );\n    }\n}\n","import * as React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { inject, observer } from 'mobx-react';\nimport TangleStore from 'stores/TangleStore';\nimport { resolveBase58ConflictID } from 'utils/ConflictIDResolver';\nimport * as dateformat from 'dateformat';\nimport LinkToDashboard from 'components/LinkToDashboard';\n\ninterface Props {\n    tangleStore?: TangleStore;\n}\n\n@inject('tangleStore')\n@observer\nexport class BlockInfo extends React.Component<Props, any> {\n    render() {\n        const { selectedBlk } = this.props.tangleStore;\n\n        return (\n            selectedBlk && (\n                <div className=\"selectedInfo\">\n                    <Card style={{ width: '100%' }}>\n                        <Card.Body>\n                            <Card.Title>\n                                <LinkToDashboard\n                                    route={`explorer/block/${selectedBlk.ID}`}\n                                    title={selectedBlk.ID}\n                                />\n                            </Card.Title>\n                            <ListGroup variant=\"flush\">\n                                <ListGroup.Item>\n                                    Strong Parents:\n                                    <ListGroup>\n                                        {selectedBlk.strongParentIDs.map(\n                                            (p, i) => (\n                                                <ListGroup.Item key={i}>\n                                                    <LinkToDashboard\n                                                        route={`explorer/block/${p}`}\n                                                        title={p}\n                                                    />\n                                                </ListGroup.Item>\n                                            )\n                                        )}\n                                    </ListGroup>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Weak Parents:\n                                    <ListGroup>\n                                        {selectedBlk.weakParentIDs.map(\n                                            (p, i) => (\n                                                <ListGroup.Item key={i}>\n                                                    <LinkToDashboard\n                                                        route={`explorer/block/${p}`}\n                                                        title={p}\n                                                    />\n                                                </ListGroup.Item>\n                                            )\n                                        )}\n                                    </ListGroup>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    ShallowLike Parents:\n                                    <ListGroup>\n                                        {selectedBlk.shallowLikeParentIDs.map(\n                                            (p, i) => (\n                                                <ListGroup.Item key={i}>\n                                                    <LinkToDashboard\n                                                        route={`explorer/block/${p}`}\n                                                        title={p}\n                                                    />\n                                                </ListGroup.Item>\n                                            )\n                                        )}\n                                    </ListGroup>\n                                </ListGroup.Item>\n                                {selectedBlk.isTx && (\n                                    <ListGroup.Item>\n                                        Transaction:{' '}\n                                        <LinkToDashboard\n                                            route={`explorer/transaction/${selectedBlk.txID}`}\n                                            title={selectedBlk.txID}\n                                        />\n                                    </ListGroup.Item>\n                                )}\n                                <ListGroup.Item>\n                                    ConflictIDs:{' '}\n                                    <ListGroup>\n                                        {selectedBlk.conflictIDs && selectedBlk.conflictIDs.map(\n                                            (b, i) => (\n                                                <ListGroup.Item key={i}>\n                                                    <LinkToDashboard\n                                                        route={`explorer/conflict/${b}`}\n                                                        title={resolveBase58ConflictID(\n                                                            b\n                                                        )}\n                                                    />\n                                                </ListGroup.Item>\n                                            )\n                                        )}\n                                    </ListGroup>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    isMarker: {selectedBlk.isMarker.toString()}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    ConfirmationState: {selectedBlk.confirmationState}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Confirmed:{' '}\n                                    {selectedBlk.isConfirmed.toString()}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Confirmed Time:{' '}\n                                    {dateformat(\n                                        new Date(\n                                            selectedBlk.confirmationStateTime / 1000000\n                                        ),\n                                        'dd.mm.yyyy HH:MM:ss'\n                                    )}\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Card.Body>\n                    </Card>\n                </div>\n            )\n        );\n    }\n}\n","import * as React from 'react';\nimport { COLOR } from '../styles/tangleStyles';\nimport { BRANCH, UTXO } from '../styles/cytoscapeStyles';\n\nexport class TangleLegend extends React.Component<any, any> {\n    render() {\n        const nodeLabels = [\n            'BLK Confirmed',\n            'BLK Pending',\n            'BLK with TX Confirmed',\n            'BLK with TX Pending',\n            'Tip',\n            'Unknown'\n        ];\n        const nodeColors = [\n            COLOR.MESSAGE_CONFIRMED,\n            COLOR.MESSAGE_PENDING,\n            COLOR.TRANSACTION_CONFIRMED,\n            COLOR.TRANSACTION_PENDING,\n            COLOR.TIP,\n            COLOR.NODE_UNKNOWN\n        ];\n        const linkLabels = [\n            'Strong',\n            'Weak',\n            'Shallow Liked',\n            'Shallow Disliked'\n        ];\n        const linksColors = [\n            COLOR.LINK_STRONG,\n            COLOR.LINK_WEAK,\n            COLOR.LINK_SHALLOW_LIKED,\n            COLOR.LINK_SHALLOW_DISLIKED\n        ];\n        const linkTypes = ['solid', 'dashed', 'dotted', 'dotted'];\n\n        const legendItemsNodes = [];\n        const legendItemsLinks = [];\n\n        for (const i in nodeLabels) {\n            legendItemsNodes.push(\n                <div className={'legend-item'}>\n                    <div\n                        className=\"legend-color\"\n                        style={{\n                            backgroundColor: nodeColors[i]\n                        }}\n                    />\n                    <div className=\"legend-label\">{nodeLabels[i]}</div>\n                </div>\n            );\n        }\n        legendItemsLinks.push(\n            <div className={'legend-item'}>\n                <div\n                    className=\"legend-color\"\n                    style={{\n                        backgroundColor: COLOR.MESSAGE_CONFIRMED\n                    }}\n                >\n                    <div className={'legend-marker'} />\n                </div>\n                <div className=\"legend-label\">Marker</div>\n            </div>\n        );\n        for (const i in linkLabels) {\n            legendItemsLinks.push(\n                <div className={'legend-item'}>\n                    <div\n                        className=\"link-type\"\n                        style={{\n                            borderBottom: `${linkTypes[i]} 2px ${linksColors[i]}`\n                        }}\n                    />\n                    <div className=\"legend-label\">{linkLabels[i]}</div>\n                </div>\n            );\n        }\n        return (\n            <>\n                <div className=\"legend\">{legendItemsNodes}</div>\n                <div className=\"legend\">{legendItemsLinks}</div>\n            </>\n        );\n    }\n}\n\nexport class UTXOLegend extends React.Component<any, any> {\n    render() {\n        const nodeLabels = ['TX Confirmed', 'TX Pending'];\n        const nodeColors = [UTXO.COLOR_CONFIRMED, UTXO.PARENT_COLOR];\n\n        const legendItemsNodes = [];\n\n        for (const i in nodeLabels) {\n            legendItemsNodes.push(\n                <div className={'legend-item'}>\n                    <div\n                        className=\"legend-color\"\n                        style={{\n                            backgroundColor: nodeColors[i]\n                        }}\n                    />\n                    <div className=\"legend-label\">{nodeLabels[i]}</div>\n                </div>\n            );\n        }\n        return (\n            <>\n                <div className=\"legend\">{legendItemsNodes}</div>\n            </>\n        );\n    }\n}\n\nexport class ConflictLegend extends React.Component<any, any> {\n    render() {\n        const nodeLabels = [\n            'Conflict conflict confirmed',\n            'Conflict conflict pending/rejected',\n            'Master conflict'\n        ];\n        const nodeColors = [\n            BRANCH.COLOR_CONFIRMED,\n            BRANCH.COLOR,\n            BRANCH.MASTER_COLOR\n        ];\n\n        const legendItemsNodes = [];\n\n        for (const i in nodeLabels) {\n            legendItemsNodes.push(\n                <div className={'legend-item'}>\n                    <div\n                        className=\"legend-color\"\n                        style={{\n                            backgroundColor: nodeColors[i]\n                        }}\n                    />\n                    <div className=\"legend-label\">{nodeLabels[i]}</div>\n                </div>\n            );\n        }\n        return (\n            <>\n                <div className=\"legend\">{legendItemsNodes}</div>\n            </>\n        );\n    }\n}\n","import * as React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { inject, observer } from 'mobx-react';\nimport { MdKeyboardArrowDown, MdKeyboardArrowUp } from 'react-icons/md';\nimport { Collapse } from 'react-bootstrap';\nimport TangleStore from 'stores/TangleStore';\nimport { BlockInfo } from 'components/BlockInfo';\nimport 'styles/style.css';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport GlobalStore from '../stores/GlobalStore';\nimport { TangleLegend } from './Legend';\n\ninterface Props {\n    tangleStore?: TangleStore;\n    globalStore?: GlobalStore;\n}\n\n@inject('tangleStore')\n@inject('globalStore')\n@observer\nexport default class TangleDAG extends React.Component<Props, any> {\n    constructor(props) {\n        super(props);\n        this.state = { open: true };\n    }\n\n    componentDidMount() {\n        this.props.tangleStore.start();\n    }\n\n    componentWillUnmount() {\n        this.props.tangleStore.stop();\n    }\n\n    pauseResumeVisualizer = () => {\n        this.props.tangleStore.pauseResume();\n    };\n\n    updateVerticesLimit = (e) => {\n        this.props.tangleStore.updateVerticesLimit(e.target.value);\n    };\n\n    updateSearch = (e) => {\n        this.props.tangleStore.updateSearch(e.target.value);\n    };\n\n    searchAndSelect = (e: any) => {\n        if (e.key !== 'Enter') return;\n        this.props.tangleStore.searchAndSelect();\n    };\n\n    centerGraph = () => {\n        this.props.tangleStore.centerEntireGraph();\n    };\n\n    syncWithBlk = () => {\n        this.props.globalStore.syncWithBlk();\n    };\n\n    render() {\n        const { paused, maxTangleVertices, search } = this.props.tangleStore;\n\n        return (\n            <Container>\n                <div\n                    onClick={() =>\n                        this.setState((prevState) => ({\n                            open: !prevState.open\n                        }))\n                    }\n                >\n                    <h2>\n                        Tangle DAG\n                        {this.state.open ? (\n                            <MdKeyboardArrowUp />\n                        ) : (\n                            <MdKeyboardArrowDown />\n                        )}\n                    </h2>\n                </div>\n                <Collapse in={this.state.open}>\n                    <div className={'panel'}>\n                        <Row xs={5}>\n                            <Col\n                                className=\"align-self-end\"\n                                style={{\n                                    display: 'flex',\n                                    justifyContent: 'space-evenly'\n                                }}\n                            >\n                                <InputGroup className=\"mb-1\">\n                                    <OverlayTrigger\n                                        trigger={['hover', 'focus']}\n                                        placement=\"right\"\n                                        overlay={\n                                            <Popover id=\"popover-basic\">\n                                                <Popover.Body>\n                                                    Pauses/resumes rendering the\n                                                    graph.\n                                                </Popover.Body>\n                                            </Popover>\n                                        }\n                                    >\n                                        <Button\n                                            className={'button'}\n                                            onClick={this.pauseResumeVisualizer}\n                                            variant=\"outline-secondary\"\n                                        >\n                                            {paused\n                                                ? 'Resume Rendering'\n                                                : 'Pause Rendering'}\n                                        </Button>\n                                    </OverlayTrigger>\n                                </InputGroup>\n                                <InputGroup className=\"mb-1\">\n                                    <Button\n                                        className={'button'}\n                                        onClick={this.centerGraph}\n                                        variant=\"outline-secondary\"\n                                    >\n                                        Center Graph\n                                    </Button>\n                                </InputGroup>\n                                <InputGroup className=\"mb-1\">\n                                    <Button\n                                        className={'button'}\n                                        onClick={this.syncWithBlk}\n                                        variant=\"outline-secondary\"\n                                    >\n                                        Sync with blk\n                                    </Button>\n                                </InputGroup>\n                            </Col>\n                            <Col>\n                                <InputGroup className=\"mb-1\">\n                                    <InputGroup.Text id=\"vertices-limit\">\n                                        Vertices Limit\n                                    </InputGroup.Text>\n                                    <FormControl\n                                        placeholder=\"limit\"\n                                        value={maxTangleVertices.toString()}\n                                        onChange={this.updateVerticesLimit}\n                                        aria-label=\"vertices-limit\"\n                                        aria-describedby=\"vertices-limit\"\n                                    />\n                                </InputGroup>\n                            </Col>\n                            <Col>\n                                <InputGroup className=\"mb-1\">\n                                    <InputGroup.Text id=\"search-vertices\">\n                                        Search Vertex\n                                    </InputGroup.Text>\n                                    <FormControl\n                                        placeholder=\"search\"\n                                        type=\"text\"\n                                        value={search}\n                                        onChange={this.updateSearch}\n                                        aria-label=\"vertices-search\"\n                                        onKeyUp={this.searchAndSelect}\n                                        aria-describedby=\"vertices-search\"\n                                    />\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                        <div className=\"graphFrame\">\n                            <BlockInfo />\n                            <div id=\"tangleVisualizer\" />\n                        </div>\n                        <TangleLegend />\n                    </div>\n                </Collapse>\n                <br />\n            </Container>\n        );\n    }\n}\n","import * as React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { inject, observer } from 'mobx-react';\nimport UTXOStore from 'stores/UTXOStore';\nimport * as dateformat from 'dateformat';\nimport LinkToDashboard from 'components/LinkToDashboard';\n\ninterface Props {\n    utxoStore?: UTXOStore;\n}\n\n@inject('utxoStore')\n@observer\nexport class TransactionInfo extends React.Component<Props, any> {\n    render() {\n        const { selectedTx } = this.props.utxoStore;\n\n        return (\n            selectedTx && (\n                <div className=\"selectedInfo\">\n                    <Card style={{ width: '100%' }}>\n                        <Card.Body>\n                            <Card.Title>\n                                <LinkToDashboard\n                                    route={`explorer/transaction/${selectedTx.ID}`}\n                                    title={selectedTx.ID}\n                                />\n                            </Card.Title>\n                            <ListGroup variant=\"flush\">\n                                <ListGroup.Item>\n                                    Blk ID:\n                                    <LinkToDashboard\n                                        route={`explorer/messasge/${selectedTx.blkID}`}\n                                        title={selectedTx.blkID}\n                                    />\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Inputs:\n                                    <ListGroup>\n                                        {selectedTx.inputs.map((p, i) => (\n                                            <ListGroup.Item key={i}>\n                                                <LinkToDashboard\n                                                    route={`explorer/output/${p.referencedOutputID.base58}`}\n                                                    title={\n                                                        p.referencedOutputID\n                                                            .base58\n                                                    }\n                                                />\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Outputs:\n                                    <ListGroup>\n                                        {selectedTx.outputs.map((p, i) => (\n                                            <ListGroup.Item key={i}>\n                                                <LinkToDashboard\n                                                    route={`explorer/output/${p}`}\n                                                    title={p}\n                                                />\n                                            </ListGroup.Item>\n                                        ))}\n                                    </ListGroup>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    ConfirmationState: {selectedTx.confirmationState}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Confirmed:{' '}\n                                    {selectedTx.isConfirmed.toString()}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    ConfirmationStateTime: {' '}\n                                    {dateformat(\n                                        new Date(\n                                            selectedTx.confirmationStateTime / 1000000\n                                        ),\n                                        'dd.mm.yyyy HH:MM:ss'\n                                    )}\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Card.Body>\n                    </Card>\n                </div>\n            )\n        );\n    }\n}\n","import * as React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { inject, observer } from 'mobx-react';\nimport { MdKeyboardArrowDown, MdKeyboardArrowUp } from 'react-icons/md';\nimport { Collapse } from 'react-bootstrap';\nimport { TransactionInfo } from 'components/TransactionInfo';\nimport UTXOStore from 'stores/UTXOStore';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport GlobalStore from '../stores/GlobalStore';\nimport { UTXOLegend } from './Legend';\n\ninterface Props {\n    utxoStore?: UTXOStore;\n    globalStore?: GlobalStore;\n}\n\n@inject('utxoStore')\n@inject('globalStore')\n@observer\nexport default class UTXODAG extends React.Component<Props, any> {\n    constructor(props) {\n        super(props);\n        this.state = { isIdle: true, open: true };\n    }\n\n    componentDidMount() {\n        this.props.utxoStore.start();\n    }\n\n    componentWillUnmount() {\n        this.props.utxoStore.stop();\n    }\n\n    pauseResumeVisualizer = () => {\n        this.props.utxoStore.pauseResume();\n    };\n\n    updateVerticesLimit = (e) => {\n        this.props.utxoStore.updateVerticesLimit(e.target.value);\n    };\n\n    updateSearch = (e) => {\n        this.props.utxoStore.updateSearch(e.target.value);\n    };\n\n    searchAndSelect = (e: any) => {\n        if (e.key !== 'Enter') return;\n        this.props.utxoStore.searchAndSelect();\n    };\n\n    centerGraph = () => {\n        this.props.utxoStore.centerEntireGraph();\n    };\n\n    syncWithTx = () => {\n        this.props.globalStore.syncWithTx();\n    };\n\n    render() {\n        const { paused, maxUTXOVertices, search } = this.props.utxoStore;\n\n        return (\n            <Container>\n                <div\n                    onClick={() =>\n                        this.setState((prevState) => ({\n                            open: !prevState.open\n                        }))\n                    }\n                >\n                    <h2>\n                        UTXO DAG\n                        {this.state.open ? (\n                            <MdKeyboardArrowUp />\n                        ) : (\n                            <MdKeyboardArrowDown />\n                        )}\n                    </h2>\n                </div>\n                <Collapse in={this.state.open}>\n                    <div className={'panel'}>\n                        <Row xs={5}>\n                            <Col\n                                className=\"align-self-end\"\n                                style={{\n                                    display: 'flex',\n                                    justifyContent: 'space-evenly'\n                                }}\n                            >\n                                <InputGroup className=\"mb-1\">\n                                    <OverlayTrigger\n                                        trigger={['hover', 'focus']}\n                                        placement=\"right\"\n                                        overlay={\n                                            <Popover id=\"popover-basic\">\n                                                <Popover.Body>\n                                                    Pauses/resumes rendering the\n                                                    graph.\n                                                </Popover.Body>\n                                            </Popover>\n                                        }\n                                    >\n                                        <Button\n                                            className={'button'}\n                                            onClick={this.pauseResumeVisualizer}\n                                            variant=\"outline-secondary\"\n                                        >\n                                            {paused\n                                                ? 'Resume Rendering'\n                                                : 'Pause Rendering'}\n                                        </Button>\n                                    </OverlayTrigger>\n                                </InputGroup>\n                                <InputGroup className=\"mb-1\">\n                                    <Button\n                                        className={'button'}\n                                        onClick={this.centerGraph}\n                                        variant=\"outline-secondary\"\n                                    >\n                                        Center Graph\n                                    </Button>\n                                </InputGroup>\n                                <InputGroup className=\"mb-1\">\n                                    <Button\n                                        className={'button'}\n                                        onClick={this.syncWithTx}\n                                        variant=\"outline-secondary\"\n                                    >\n                                        Sync with tx\n                                    </Button>\n                                </InputGroup>\n                            </Col>\n                            <Col>\n                                <InputGroup className=\"mb-1\">\n                                    <InputGroup.Text id=\"vertices-limit\">\n                                        Vertices Limit\n                                    </InputGroup.Text>\n                                    <FormControl\n                                        placeholder=\"limit\"\n                                        value={maxUTXOVertices.toString()}\n                                        onChange={this.updateVerticesLimit}\n                                        aria-label=\"vertices-limit\"\n                                        aria-describedby=\"vertices-limit\"\n                                    />\n                                </InputGroup>\n                            </Col>\n                            <Col>\n                                <InputGroup className=\"mb-1\">\n                                    <InputGroup.Text id=\"search-vertices\">\n                                        Search Vertex\n                                    </InputGroup.Text>\n                                    <FormControl\n                                        placeholder=\"search\"\n                                        type=\"text\"\n                                        value={search}\n                                        onChange={this.updateSearch}\n                                        aria-label=\"vertices-search\"\n                                        onKeyUp={this.searchAndSelect}\n                                        aria-describedby=\"vertices-search\"\n                                    />\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                        <div className=\"graphFrame\">\n                            <TransactionInfo />\n                            <div id=\"utxoVisualizer\" />\n                        </div>\n                        <UTXOLegend />\n                    </div>\n                </Collapse>\n                <br />\n            </Container>\n        );\n    }\n}\n","import * as React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport { inject, observer } from 'mobx-react';\nimport ConflictStore from 'stores/ConflictStore';\nimport LinkToDashboard from 'components/LinkToDashboard';\nimport {resolveBase58ConflictID} from '../utils/ConflictIDResolver';\n\ninterface Props {\n    conflictStore?: ConflictStore;\n}\n\n@inject('conflictStore')\n@observer\nexport class ConflictInfo extends React.Component<Props, any> {\n    render() {\n        const { selectedConflict } = this.props.conflictStore;\n\n        return (\n            selectedConflict && (\n                <div className=\"selectedInfo\">\n                    <Card style={{ width: '100%' }}>\n                        <Card.Body>\n                            <Card.Title>\n                                <LinkToDashboard\n                                    route={`explorer/conflict/${\n                                        resolveBase58ConflictID(selectedConflict.ID)\n                                    }`}\n                                    title={selectedConflict.ID}\n                                />\n                            </Card.Title>\n                            <ListGroup variant=\"flush\">\n                                <ListGroup.Item>\n                                    Parent:\n                                    <ListGroup>\n                                        {selectedConflict.parents ? (\n                                            selectedConflict.parents.map(\n                                                (p, i) => (\n                                                    <ListGroup.Item key={i}>\n                                                        <LinkToDashboard\n                                                            route={`explorer/conflict/${p}`}\n                                                            title={resolveBase58ConflictID(p)}\n                                                        />\n                                                    </ListGroup.Item>\n                                                )\n                                            )\n                                        ) : (\n                                            <></>\n                                        )}\n                                    </ListGroup>\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Confirmed:{' '}\n                                    {selectedConflict.isConfirmed.toString()}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    ConfirmationState: {selectedConflict.confirmationState}\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    AW: {selectedConflict.aw}\n                                </ListGroup.Item>\n                                {selectedConflict.conflicts && (\n                                    <ListGroup.Item>\n                                            Conflicts:\n                                        {selectedConflict.conflicts.conflicts.map(\n                                            (p, i) => {\n                                                return (\n                                                    <ListGroup key={i}>\n                                                        <ListGroup.Item>\n                                                                OutputID:{' '}\n                                                            <LinkToDashboard\n                                                                route={`explorer/output/${p}`}\n                                                                title={\n                                                                    p\n                                                                        .outputID\n                                                                        .base58\n                                                                }\n                                                            />\n                                                        </ListGroup.Item>\n                                                        <ListGroup.Item>\n                                                                Conflicts:\n                                                            <ListGroup>\n                                                                {p.conflictIDs.map(\n                                                                    (\n                                                                        p,\n                                                                        i\n                                                                    ) => (\n                                                                        <ListGroup.Item\n                                                                            key={\n                                                                                i\n                                                                            }\n                                                                        >\n                                                                            <LinkToDashboard\n                                                                                route={`explorer/conflict/${p}`}\n                                                                                title={\n                                                                                    resolveBase58ConflictID(p)\n                                                                                }\n                                                                            />\n                                                                        </ListGroup.Item>\n                                                                    )\n                                                                )}\n                                                            </ListGroup>\n                                                        </ListGroup.Item>\n                                                    </ListGroup>\n                                                );\n                                            }\n                                        )}\n                                    </ListGroup.Item>\n                                )}\n                            </ListGroup>\n                        </Card.Body>\n                    </Card>\n                </div>\n            )\n        );\n    }\n}\n","import * as React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport {inject, observer} from 'mobx-react';\nimport {MdKeyboardArrowDown, MdKeyboardArrowUp} from 'react-icons/md';\nimport {Collapse} from 'react-bootstrap';\nimport ConflictStore from 'stores/ConflictStore';\nimport {ConflictInfo} from 'components/ConflictInfo';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport Popover from 'react-bootstrap/Popover';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport 'styles/style.css';\nimport GlobalStore from '../stores/GlobalStore';\nimport {ConflictLegend} from './Legend';\n\ninterface Props {\n    conflictStore?: ConflictStore;\n    globalStore?: GlobalStore;\n}\n\n@inject('conflictStore')\n@inject('globalStore')\n@observer\nexport default class ConflictDAG extends React.Component<Props, any> {\n    constructor(props) {\n        super(props);\n        this.state = { isIdle: true, open: true };\n    }\n\n    componentDidMount() {\n        this.props.conflictStore.start();\n    }\n\n    componentWillUnmount() {\n        this.props.conflictStore.stop();\n    }\n\n    pauseResumeVisualizer = () => {\n        this.props.conflictStore.pauseResume();\n    };\n\n    updateVerticesLimit = (e) => {\n        this.props.conflictStore.updateVerticesLimit(e.target.value);\n    };\n\n    updateSearch = (e) => {\n        this.props.conflictStore.updateSearch(e.target.value);\n    };\n\n    searchAndHighlight = (e: any) => {\n        if (e.key !== 'Enter') return;\n        this.props.conflictStore.searchAndHighlight();\n    };\n\n    centerGraph = () => {\n        this.props.conflictStore.centerEntireGraph();\n    };\n\n    syncWithConflict = () => {\n        this.props.globalStore.syncWithConflict();\n    };\n\n    render() {\n        const { paused, maxConflictVertices, search } = this.props.conflictStore;\n\n        return (\n            <Container>\n                <div\n                    onClick={() =>\n                        this.setState((prevState) => ({\n                            open: !prevState.open\n                        }))\n                    }\n                >\n                    <h2>\n                        Conflict DAG\n                        {this.state.open ? (\n                            <MdKeyboardArrowUp />\n                        ) : (\n                            <MdKeyboardArrowDown />\n                        )}\n                    </h2>\n                </div>\n                <Collapse in={this.state.open}>\n                    <div className={'panel'}>\n                        <Row xs={5}>\n                            <Col\n                                className=\"align-self-end\"\n                                style={{\n                                    display: 'flex',\n                                    justifyContent: 'space-evenly'\n                                }}\n                            >\n                                <InputGroup className=\"mb-1\">\n                                    <OverlayTrigger\n                                        trigger={['hover', 'focus']}\n                                        placement=\"right\"\n                                        overlay={\n                                            <Popover id=\"popover-basic\">\n                                                <Popover.Body>\n                                                    Pauses/resumes rendering the\n                                                    graph.\n                                                </Popover.Body>\n                                            </Popover>\n                                        }\n                                    >\n                                        <Button\n                                            className={'button'}\n                                            onClick={this.pauseResumeVisualizer}\n                                            variant=\"outline-secondary\"\n                                        >\n                                            {paused\n                                                ? 'Resume Rendering'\n                                                : 'Pause Rendering'}\n                                        </Button>\n                                    </OverlayTrigger>\n                                </InputGroup>\n                                <InputGroup className=\"mb-1\">\n                                    <Button\n                                        className={'button'}\n                                        onClick={this.centerGraph}\n                                        variant=\"outline-secondary\"\n                                    >\n                                        Center Graph\n                                    </Button>\n                                </InputGroup>\n                                <InputGroup className=\"mb-1\">\n                                    <Button\n                                        className={'button'}\n                                        onClick={this.syncWithConflict}\n                                        variant=\"outline-secondary\"\n                                    >\n                                        Sync with conflict\n                                    </Button>\n                                </InputGroup>\n                            </Col>\n                            <Col>\n                                <InputGroup className=\"mb-1\">\n                                    <InputGroup.Text id=\"vertices-limit\">\n                                        Vertices Limit\n                                    </InputGroup.Text>\n                                    <FormControl\n                                        placeholder=\"limit\"\n                                        value={maxConflictVertices.toString()}\n                                        onChange={this.updateVerticesLimit}\n                                        aria-label=\"vertices-limit\"\n                                        aria-describedby=\"vertices-limit\"\n                                    />\n                                </InputGroup>\n                            </Col>\n                            <Col>\n                                <InputGroup className=\"mb-1\">\n                                    <InputGroup.Text id=\"search-vertices\">\n                                        Search Vertex\n                                    </InputGroup.Text>\n                                    <FormControl\n                                        placeholder=\"search\"\n                                        type=\"text\"\n                                        value={search}\n                                        onChange={this.updateSearch}\n                                        aria-label=\"vertices-search\"\n                                        onKeyUp={this.searchAndHighlight}\n                                        aria-describedby=\"vertices-search\"\n                                    />\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                        <div className=\"graphFrame\">\n                            <ConflictInfo />\n                            <div id=\"conflictVisualizer\" />\n                        </div>\n                        <ConflictLegend />\n                    </div>\n                </Collapse>\n                <br />\n            </Container>\n        );\n    }\n}\n","import * as React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport GlobalStore from '../stores/GlobalStore';\nimport { inject, observer } from 'mobx-react';\nimport moment, { isMoment, Moment } from 'moment';\nimport Datetime from 'react-datetime';\nimport { DATE_FORMAT, TIME_FORMAT } from '../utils/constants';\n\ninterface Props {\n    globalStore?: GlobalStore;\n    isStartTime: boolean;\n}\n\n@inject('globalStore')\n@observer\nexport class TimePickerButtons extends React.Component<Props, any> {\n    setCurrent = () => {\n        const m = moment();\n        this.updateSearchTimes(m);\n    };\n\n    addTime = () => {\n        let m = this.props.isStartTime\n            ? moment.unix(this.props.globalStore.searchStartingTime)\n            : moment.unix(this.props.globalStore.searchEndingTime);\n        m = m.add(30, 'seconds');\n        this.updateSearchTimes(m);\n    };\n\n    updateSearchTimes = (m: Moment) => {\n        if (this.props.isStartTime) {\n            this.props.globalStore.updateSearchStartingTime(m);\n            this.props.globalStore.updateStartManualPicker(true);\n        } else {\n            this.props.globalStore.updateSearchEndingTime(m);\n            this.props.globalStore.updateEndManualPicker(true);\n        }\n    };\n\n    subTime = () => {\n        let m = this.props.isStartTime\n            ? moment.unix(this.props.globalStore.searchStartingTime)\n            : moment.unix(this.props.globalStore.searchEndingTime);\n        m = m.subtract(30, 'seconds');\n        this.updateSearchTimes(m);\n    };\n\n    render() {\n        return (\n            <div>\n                <div className={'tripleButton'}>\n                    <Button\n                        className={'button button-wide button-left'}\n                        variant=\"outline-secondary\"\n                        onClick={this.setCurrent}\n                    >\n                        Set current time\n                    </Button>\n                    <Button\n                        className={'button button-middle'}\n                        variant=\"outline-secondary\"\n                        onClick={this.subTime}\n                    >\n                        -30s\n                    </Button>\n                    <Button\n                        className={'button button-right'}\n                        variant=\"outline-secondary\"\n                        onClick={this.addTime}\n                    >\n                        +30s\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\ninterface PickerProps {\n    globalStore?: GlobalStore;\n    isStartTime?: boolean;\n    dateTime?: Moment | undefined;\n    onOpenFunc?: any;\n}\n\nexport class Picker extends React.Component<PickerProps, any> {\n    updateFrom = (date) => {\n        if (isMoment(date)) {\n            this.props.globalStore.updateSearchStartingTime(date);\n        }\n    };\n\n    updateTo = (date) => {\n        if (isMoment(date)) {\n            this.props.globalStore.updateSearchEndingTime(date);\n        }\n    };\n\n    render() {\n        const isStartTime = this.props.isStartTime;\n        const updateFunc = isStartTime ? this.updateFrom : this.updateTo;\n        const onOpenFunc = this.props.onOpenFunc;\n        return (\n            <>\n                <Datetime\n                    dateFormat={DATE_FORMAT}\n                    timeFormat={TIME_FORMAT}\n                    onChange={updateFunc}\n                    value={this.props.dateTime}\n                    onOpen={onOpenFunc}\n                />\n            </>\n        );\n    }\n}\n","import * as React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport { inject, observer } from 'mobx-react';\nimport { MdKeyboardArrowDown, MdKeyboardArrowUp } from 'react-icons/md';\nimport { Collapse } from 'react-bootstrap';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\nimport GlobalStore from 'stores/GlobalStore';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport moment, { isMoment } from 'moment';\nimport 'react-datetime/css/react-datetime.css';\nimport { Picker, TimePickerButtons } from './timeButtons';\n\ninterface Props {\n    globalStore?: GlobalStore;\n}\n\n@inject('globalStore')\n@observer\nexport default class GlobalSettings extends React.Component<Props, any> {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isIdle: true,\n            searching: false,\n            open: true,\n            searchOpen: true,\n            dashboardUrlOpen: true,\n            syncOpen: true,\n            explorerAddress: ''\n        };\n    }\n\n    updateFrom = (date) => {\n        if (isMoment(date)) {\n            this.props.globalStore.updateSearchStartingTime(date);\n        }\n    };\n\n    updateTo = (date) => {\n        if (isMoment(date)) {\n            this.props.globalStore.updateSearchEndingTime(date);\n        }\n    };\n\n    searchVerticesInLedger = () => {\n        this.setState({ searching: true, isIdle: false });\n        this.props.globalStore\n            .searchAndDrawResults()\n            .then(() => this.setState({ searching: false }));\n    };\n\n    clearSearch = () => {\n        this.setState({ isIdle: true });\n        this.props.globalStore.clearSearchAndResume();\n    };\n\n    updateFormInput = (e) => {\n        this.setState({ [e.target.name]: e.target.value });\n    };\n\n    setExplorerAddress = (e) => {\n        if (e.key === 'Enter') {\n            this.props.globalStore.updateExplorerAddress(\n                this.state.explorerAddress\n            );\n            this.setState({ explorerAddress: '' });\n        }\n    };\n\n    syncWithBlk = () => {\n        this.props.globalStore.syncWithBlk();\n    };\n\n    syncWithTx = () => {\n        this.props.globalStore.syncWithTx();\n    };\n\n    syncWithConflict = () => {\n        this.props.globalStore.syncWithConflict();\n    };\n\n    clearSync = () => {\n        this.props.globalStore.clearSync();\n    };\n\n    onOpenStartPicker = () => {\n        this.props.globalStore.updateStartManualPicker(false);\n    };\n\n    onOpenEndPicker = () => {\n        this.props.globalStore.updateEndManualPicker(false);\n    };\n\n    renderSearchResults = () => {\n        this.props.globalStore.renderSearchResults();\n    };\n\n    render() {\n        const pickerStartValue = this.props.globalStore.manualPicker\n            ? moment.unix(this.props.globalStore.searchStartingTime)\n            : undefined;\n        const pickerEndValue = this.props.globalStore.manualPicker\n            ? moment.unix(this.props.globalStore.searchEndingTime)\n            : undefined;\n        const globalStore = this.props.globalStore;\n        const { searchResponse, previewResponseSize } = this.props.globalStore;\n        return (\n            <Container>\n                <div\n                    onClick={() =>\n                        this.setState((prevState) => ({\n                            open: !prevState.open\n                        }))\n                    }\n                >\n                    <h2>\n                        Global Functions\n                        {this.state.open ? (\n                            <MdKeyboardArrowUp />\n                        ) : (\n                            <MdKeyboardArrowDown />\n                        )}\n                    </h2>\n                </div>\n                <Collapse in={this.state.open}>\n                    <div>\n                        <div className={'panel'}>\n                            <div\n                                onClick={() =>\n                                    this.setState((prevState) => ({\n                                        searchOpen: !prevState.searchOpen\n                                    }))\n                                }\n                            >\n                                <h5>\n                                    Search Vertex Within Time Intervals{' '}\n                                    {this.state.searchOpen ? (\n                                        <MdKeyboardArrowUp />\n                                    ) : (\n                                        <MdKeyboardArrowDown />\n                                    )}\n                                </h5>\n                            </div>\n                            <Collapse in={this.state.searchOpen}>\n                                <Row md={4}>\n                                    <Col>\n                                        From:{' '}\n                                        <Picker\n                                            isStartTime={true}\n                                            globalStore={globalStore}\n                                            dateTime={pickerStartValue}\n                                            onOpenFunc={this.onOpenStartPicker}\n                                        />\n                                        <TimePickerButtons isStartTime={true} />\n                                    </Col>\n                                    <Col>\n                                        To:{' '}\n                                        <Picker\n                                            isStartTime={false}\n                                            globalStore={globalStore}\n                                            dateTime={pickerEndValue}\n                                            onOpenFunc={this.onOpenEndPicker}\n                                        />\n                                        <TimePickerButtons\n                                            isStartTime={false}\n                                        />\n                                    </Col>\n                                    <Col className=\"align-self-end\">\n                                        <Button\n                                            className={'button'}\n                                            onClick={\n                                                this.searchVerticesInLedger\n                                            }\n                                            variant=\"outline-secondary\"\n                                        >\n                                            {this.state.searching ? (\n                                                <div>\n                                                    <span className=\"spinner-border spinner-border-sm text-secondary\" />{' '}\n                                                    Searching...\n                                                </div>\n                                            ) : (\n                                                'Search'\n                                            )}\n                                        </Button>\n                                        <Button\n                                            className={'button'}\n                                            onClick={this.renderSearchResults}\n                                            variant=\"outline-secondary\"\n                                        >\n                                            Render\n                                        </Button>\n                                        <Button\n                                            className={'button'}\n                                            disabled={this.state.isIdle}\n                                            onClick={this.clearSearch}\n                                            variant=\"outline-secondary\"\n                                        >\n                                            Clear and Resume\n                                        </Button>\n                                    </Col>\n\n                                    <Col\n                                        className=\"align-self-end\"\n                                        style={{\n                                            display: 'flex',\n                                            color: 'red'\n                                        }}\n                                    >\n                                        <div>\n                                            <p className={'response-info'}>\n                                                {previewResponseSize}\n                                            </p>\n                                            <p>{searchResponse}</p>\n                                        </div>\n                                    </Col>\n                                </Row>\n                            </Collapse>\n                        </div>\n                        <div className={'panel'}>\n                            <div\n                                onClick={() =>\n                                    this.setState((prevState) => ({\n                                        dashboardUrlOpen:\n                                            !prevState.dashboardUrlOpen\n                                    }))\n                                }\n                            >\n                                <h5 style={{ marginTop: '10px' }}>\n                                    Set explorer URL{' '}\n                                    {this.state.dashboardUrlOpen ? (\n                                        <MdKeyboardArrowUp />\n                                    ) : (\n                                        <MdKeyboardArrowDown />\n                                    )}\n                                </h5>\n                                <p>\n                                    {' '}\n                                    Default is the local explorer:{' '}\n                                    <i>http://localhost:8081</i>{' '}\n                                </p>\n                            </div>\n                            <Collapse in={this.state.dashboardUrlOpen}>\n                                <Row xs={5}>\n                                    <Col>\n                                        <InputGroup className=\"mb-3\">\n                                            <FormControl\n                                                placeholder=\"explorer URL\"\n                                                aria-label=\"explorer URL\"\n                                                name=\"explorerAddress\"\n                                                aria-describedby=\"basic-addon1\"\n                                                value={\n                                                    this.state.explorerAddress\n                                                }\n                                                onChange={this.updateFormInput}\n                                                onKeyUp={\n                                                    this.setExplorerAddress\n                                                }\n                                            />\n                                        </InputGroup>\n                                    </Col>\n                                </Row>\n                            </Collapse>\n                        </div>\n                        <div className={'panel'}>\n                            <div\n                                onClick={() =>\n                                    this.setState((prevState) => ({\n                                        syncOpen: !prevState.syncOpen\n                                    }))\n                                }\n                            >\n                                <h5>\n                                    Select and center vertex across DAGs{' '}\n                                    {this.state.syncOpen ? (\n                                        <MdKeyboardArrowUp />\n                                    ) : (\n                                        <MdKeyboardArrowDown />\n                                    )}\n                                </h5>\n                                <p>\n                                    {' '}\n                                    Select a block/transaction/conflict and\n                                    click the corresponding button to sync.{' '}\n                                </p>\n                            </div>\n                            <Collapse in={this.state.syncOpen}>\n                                <Row>\n                                    <Col xs=\"auto\">\n                                        <Button\n                                            className={'button'}\n                                            onClick={this.syncWithBlk}\n                                            variant=\"outline-secondary\"\n                                        >\n                                            Sync with block\n                                        </Button>\n                                    </Col>\n                                    <Col xs=\"auto\">\n                                        <Button\n                                            className={'button'}\n                                            onClick={this.syncWithTx}\n                                            variant=\"outline-secondary\"\n                                        >\n                                            Sync with transaction\n                                        </Button>\n                                    </Col>\n                                    <Col xs=\"auto\">\n                                        <Button\n                                            className={'button'}\n                                            onClick={this.syncWithConflict}\n                                            variant=\"outline-secondary\"\n                                        >\n                                            Sync with conflict\n                                        </Button>\n                                    </Col>\n                                    <Col xs=\"auto\">\n                                        <Button\n                                            className={'button'}\n                                            onClick={this.clearSync}\n                                            variant=\"outline-secondary\"\n                                        >\n                                            Clear\n                                        </Button>\n                                    </Col>\n                                </Row>\n                            </Collapse>\n                        </div>\n                    </div>\n                </Collapse>\n                <br />\n            </Container>\n        );\n    }\n}\n","export default __webpack_public_path__ + \"static/media/logo_dark.eec42e74.png\";","import * as React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport TangleDAG from 'components/TangleDAG';\nimport UTXODAG from 'components/UTXODAG';\nimport ConflictDAG from 'components/ConflictDAG';\nimport GlobalSettings from 'components/GlobalSettings';\nimport {connectWebSocket} from 'utils/WS';\nimport {Navbar} from 'react-bootstrap';\nimport logo from './../images/logo_dark.png';\n\nexport class Root extends React.Component {\n    connect = () => {\n        connectWebSocket(\n            '/ws',\n            () => {\n                console.log('connection opened');\n            },\n            this.reconnect,\n            () => {\n                console.log('connection error');\n            }\n        );\n    };\n\n    reconnect = () => {\n        setTimeout(() => {\n            this.connect();\n        }, 1000);\n    };\n\n    componentDidMount(): void {\n        this.connect();\n    }\n\n    render() {\n        return (\n            <>\n                <Navbar className={'nav'}>\n                    <img\n                        src={logo}\n                        alt={'DAGs Visualizer'}\n                        style={{ height: '50px' }}\n                    />\n                </Navbar>\n                <Container>\n                    <Row>\n                        <GlobalSettings />\n                    </Row>\n                    <Row>\n                        <TangleDAG />\n                    </Row>\n                    <Row>\n                        <UTXODAG />\n                    </Row>\n                    <Row>\n                        <ConflictDAG />\n                    </Row>\n                </Container>\n            </>\n        );\n    }\n}\n","import * as ReactDOM from 'react-dom';\nimport { Provider } from 'mobx-react';\nimport TangleStore from 'stores/TangleStore';\nimport UTXOStore from 'stores/UTXOStore';\nimport ConflictStore from 'stores/ConflictStore';\nimport GlobalStore from 'stores/GlobalStore';\nimport { Root } from 'components/Root';\nimport React from 'react';\n\nconst tangleStore = new TangleStore();\nconst utxoStore = new UTXOStore();\nconst conflictStore = new ConflictStore();\nconst globalStore = new GlobalStore(tangleStore, utxoStore, conflictStore);\n\nconst stores = {\n    tangleStore: tangleStore,\n    utxoStore: utxoStore,\n    conflictStore: conflictStore,\n    globalStore: globalStore\n};\n\nReactDOM.render(\n    <Provider {...stores}>\n        <Root />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}